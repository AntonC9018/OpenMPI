/*  
 *  (C) 2001 by Argonne National Laboratory.
 *      See COPYRIGHT in top-level directory.
 */

extern(C):

/* Define some null objects */
enum MPI_COMM_NULL       = MPI_Comm(0x04000000);
enum MPI_OP_NULL         = MPI_Op(0x18000000);
enum MPI_GROUP_NULL      = MPI_Group(0x08000000);
enum MPI_DATATYPE_NULL   = MPI_Datatype(0x0c000000);
enum MPI_REQUEST_NULL    = MPI_Request(0x2c000000);
enum MPI_ERRHANDLER_NULL = MPI_Errhandler(0x14000000);
enum MPI_MESSAGE_NULL    = MPI_Message(MPI_REQUEST_NULL);
enum MPI_MESSAGE_NO_PROC = MPI_Message(0x6c000000);

/* Results of the compare operations. */
#define MPI_IDENT     0
#define MPI_CONGRUENT 1
#define MPI_SIMILAR   2
#define MPI_UNEQUAL   3

alias MPI_Datatype = int;

// BEGIN AUTO

// END AUTO

enum MPI_LONG_LONG     = MPI_LONG_LONG_INT;

enum MPI_C_COMPLEX     = MPI_C_FLOAT_COMPLEX;

/* typeclasses */
enum MPI_TYPECLASS_REAL = 1;
enum MPI_TYPECLASS_INTEGER = 2;
enum MPI_TYPECLASS_COMPLEX = 3;

/* Communicators */
alias MPI_Comm = int;
enum MPI_Comm MPI_COMM_WORLD = 0x44000000;
enum MPI_Comm MPI_COMM_SELF  = 0x44000001;

/* Groups */
alias MPI_Group = int;
enum MPI_Group MPI_GROUP_EMPTY = 0x48000000;

/* RMA and Windows */
alias MPI_Win = int;
enum MPI_Win MPI_WIN_NULL = 0x20000000;

struct ADIOI_FileD;
alias MPI_File = ADIOI_FileD*;
enum MPI_File MPI_FILE_NULL = null;

alias MPI_Op = int;

enum MPI_Op MPI_MAX     = 0x58000001;
enum MPI_Op MPI_MIN     = 0x58000002;
enum MPI_Op MPI_SUM     = 0x58000003;
enum MPI_Op MPI_PROD    = 0x58000004;
enum MPI_Op MPI_LAND    = 0x58000005;
enum MPI_Op MPI_BAND    = 0x58000006;
enum MPI_Op MPI_LOR     = 0x58000007;
enum MPI_Op MPI_BOR     = 0x58000008;
enum MPI_Op MPI_LXOR    = 0x58000009;
enum MPI_Op MPI_BXOR    = 0x5800000a;
enum MPI_Op MPI_MINLOC  = 0x5800000b;
enum MPI_Op MPI_MAXLOC  = 0x5800000c;
enum MPI_Op MPI_REPLACE = 0x5800000d;
enum MPI_Op MPI_NO_OP   = 0x5800000e;

enum MPI_TAG_UB           = 0x64400001;
enum MPI_HOST             = 0x64400003;
enum MPI_IO               = 0x64400005;
enum MPI_WTIME_IS_GLOBAL  = 0x64400007;
enum MPI_UNIVERSE_SIZE    = 0x64400009;
enum MPI_LASTUSEDCODE     = 0x6440000b;
enum MPI_APPNUM           = 0x6440000d;

/* In addition, there are 5 predefined window attributes that are
   defined for every window */
enum MPI_WIN_BASE          = 0x66000001;
enum MPI_WIN_SIZE          = 0x66000003;
enum MPI_WIN_DISP_UNIT     = 0x66000005;
enum MPI_WIN_CREATE_FLAVOR = 0x66000007;
enum MPI_WIN_MODEL         = 0x66000009;

enum MPI_MAX_PORT_NAME      = 256;
enum MPI_MAX_OBJECT_NAME    = 128;

/* Pre-defined constants */
enum MPI_UNDEFINED      = -32766;
enum MPI_KEYVAL_INVALID = 0x24000000;

mixin template CEnumAccess(T)
{
    import std.traits;
    import std.typetuple;
    enum decl(s) = `enum T ` ~ s ~ ` = T.` ~ s ~ ";\n"
    mixin(staticMap!(decl, FieldNameTuple!(T)));
}

enum MPIR_Win_flavor {
    MPI_WIN_FLAVOR_CREATE      = 1,
    MPI_WIN_FLAVOR_ALLOCATE    = 2,
    MPI_WIN_FLAVOR_DYNAMIC     = 3,
    MPI_WIN_FLAVOR_SHARED      = 4
}
alias MPIR_Win_flavor_t = MPIR_Win_flavor;
mixin CEnumAccess!MPIR_Win_flavor;

/* MPI-3 window consistency models */
enum MPIR_Win_model {
    MPI_WIN_SEPARATE   = 1,
    MPI_WIN_UNIFIED    = 2
}
alias MPIR_Win_model_t = MPIR_Win_model;
mixin CEnumAccess!MPIR_Win_model;

enum MPIR_Topo_type {
    MPI_GRAPH=1,
    MPI_CART=2,
    MPI_DIST_GRAPH=3
}
mixin CEnumAccess!MPIR_Topo_type;

enum void* MPI_BOTTOM = null;
extern int* MPI_UNWEIGHTED;
extern int* MPI_WEIGHTS_EMPTY;

enum MPI_PROC_NULL  = -1;
enum MPI_ANY_SOURCE = -2;
enum MPI_ROOT       = -3;
enum MPI_ANY_TAG    = -1;

enum MPI_LOCK_EXCLUSIVE  = 234;
enum MPI_LOCK_SHARED     = 235;

/* C functions */
alias MPI_Handler_function = void function( MPI_Comm *, int *, ... );
alias MPI_Comm_copy_attr_function = int function (MPI_Comm, int, void *, void *, 
					  void *, int *);
alias MPI_Comm_delete_attr_function = int function (MPI_Comm, int, void *, void *);
alias MPI_Type_copy_attr_function = int function (MPI_Datatype, int, void *, void *, 
					  void *, int *);
alias MPI_Type_delete_attr_function = int function (MPI_Datatype, int, void *, void *);
alias MPI_Win_copy_attr_function = int function (MPI_Win, int, void *, void *, void *,
					 int *);
alias MPI_Win_delete_attr_function = int function (MPI_Win, int, void *, void *);
/* added in MPI-2.2 */
alias MPI_Comm_errhandler_function = void function (MPI_Comm *, int *, ...);
alias MPI_File_errhandler_function = void function (MPI_File *, int *, ...);
alias MPI_Win_errhandler_function = void function (MPI_Win *, int *, ...);
/* names that were added in MPI-2.0 and deprecated in MPI-2.2 */
deprecated("since MPI-2.2")
{
    alias MPI_Comm_errhandler_fn = MPI_Comm_errhandler_function;
    alias MPI_File_errhandler_fn = MPI_File_errhandler_function;
    alias MPI_Win_errhandler_fn = MPI_Win_errhandler_function;
}

/* Built in (0x1 in 30-31), errhandler (0x5 in bits 26-29, allkind (0
   in 22-25), index in the low bits */
enum MPI_Errhandler MPI_ERRORS_ARE_FATAL = 0x54000000;
enum MPI_Errhandler MPI_ERRORS_RETURN    = 0x54000001;
/* MPIR_ERRORS_THROW_EXCEPTIONS is not part of the MPI standard, it is here to
   facilitate the c++ binding which has MPI::ERRORS_THROW_EXCEPTIONS. 
   Using the MPIR prefix preserved the MPI_ names for objects defined by
   the standard. */
enum MPI_Errhandler MPIR_ERRORS_THROW_EXCEPTIONS = 0x54000002;
alias MPI_Errhandler = int;

/* Make the C names for the dup function mixed case.
   This is required for systems that use all uppercase names for Fortran 
   externals.  */
/* MPI 1 names */
enum MPI_Copy_function MPI_NULL_COPY_FN   = null;
enum MPI_Delete_function MPI_NULL_DELETE_FN = null;

int MPIR_Dup_fn(MPI_Comm oldcomm, int keyval, void *extra_state, void *attribute_val_in, void *attribute_val_out, int *flag);
alias MPI_DUP_FN = MPIR_Dup_fn;

/* MPI 2 names */
enum MPI_Comm_copy_attr_function MPI_COMM_NULL_COPY_FN = null;
enum MPI_Comm_delete_attr_function MPI_COMM_NULL_DELETE_FN = null;
enum MPI_Comm_copy_attr_function  MPI_COMM_DUP_FN  = &MPIR_Dup_fn;
enum MPI_Win_copy_attr_function MPI_WIN_NULL_COPY_FN = null;
enum MPI_Win_delete_attr_function MPI_WIN_NULL_DELETE_FN = null;
enum MPI_Win_copy_attr_function MPI_WIN_DUP_FN = &MPI_Dup_fn;
enum MPI_Type_copy_attr_function MPI_TYPE_NULL_COPY_FN = null;
enum MPI_Type_delete_attr_function MPI_TYPE_NULL_DELETE_FN = null;
enum MPI_Type_copy_attr_function MPI_TYPE_DUP_FN = &MPIR_Dup_fn;

/* MPI request opjects */
alias MPI_Request = int;

/* MPI message objects for Mprobe and related functions */
alias MPI_Message = int;

/* User combination function */
alias MPI_User_function = void function ( void *, void *, int *, MPI_Datatype * ); 

/* MPI Attribute copy and delete functions */
alias MPI_Copy_function = int function  ( MPI_Comm, int, void *, void *, void *, int * );
alias MPI_Delete_function = int function  ( MPI_Comm, int, void *, void * );

enum MPI_VERSION    = 3;
enum MPI_SUBVERSION = 0;
enum MPICH_NAME     = 3;
enum MPICH          = 1;
enum MPICH_HAS_C2F  = 1;

/* MPICH_VERSION is the version string. MPICH_NUMVERSION is the
 * numeric version that can be used in numeric comparisons.
 *
 * MPICH_VERSION uses the following format:
 * Version: [MAJ].[MIN].[REV][EXT][EXT_NUMBER]
 * Example: 1.0.7rc1 has
 *          MAJ = 1
 *          MIN = 0
 *          REV = 7
 *          EXT = rc
 *          EXT_NUMBER = 1
 *
 * MPICH_NUMVERSION will convert EXT to a format number:
 *          ALPHA (a) = 0
 *          BETA (b)  = 1
 *          RC (rc)   = 2
 *          PATCH (p) = 3
 * Regular releases are treated as patch 0
 *
 * Numeric version will have 1 digit for MAJ, 2 digits for MIN, 2
 * digits for REV, 1 digit for EXT and 2 digits for EXT_NUMBER. So,
 * 1.0.7rc1 will have the numeric version 10007201.
 */

enum MPICH_RELEASE_TYPE_ALPHA  = 0;
enum MPICH_RELEASE_TYPE_BETA   = 1;
enum MPICH_RELEASE_TYPE_RC     = 2;
enum MPICH_RELEASE_TYPE_PATCH  = 3;

auto MPICH_CALC_VERSION(int MAJOR, int MINOR, int REVISION, int TYPE, int PATCH)
{
    return (MAJOR * 10_000_000) + (MINOR * 100_000) + (REVISION * 1000) + (TYPE * 100) + PATCH;
}

enum MPIR_Combiner_enum {
    MPI_COMBINER_NAMED            = 1,
    MPI_COMBINER_DUP              = 2,
    MPI_COMBINER_CONTIGUOUS       = 3, 
    MPI_COMBINER_VECTOR           = 4,
    MPI_COMBINER_HVECTOR_INTEGER  = 5,
    MPI_COMBINER_HVECTOR          = 6,
    MPI_COMBINER_INDEXED          = 7,
    MPI_COMBINER_HINDEXED_INTEGER = 8, 
    MPI_COMBINER_HINDEXED         = 9, 
    MPI_COMBINER_INDEXED_BLOCK    = 10, 
    MPI_COMBINER_STRUCT_INTEGER   = 11,
    MPI_COMBINER_STRUCT           = 12,
    MPI_COMBINER_SUBARRAY         = 13,
    MPI_COMBINER_DARRAY           = 14,
    MPI_COMBINER_F90_REAL         = 15,
    MPI_COMBINER_F90_COMPLEX      = 16,
    MPI_COMBINER_F90_INTEGER      = 17,
    MPI_COMBINER_RESIZED          = 18,
    MPI_COMBINER_HINDEXED_BLOCK   = 19
}
mixin CEnumAccess!MPIR_Combiner_enum;

/* for info */
alias MPI_Info int;
enum MPI_Info MPI_INFO_NULL         = 0x1c000000;
enum MPI_Info MPI_INFO_ENV          = 0x5c000001;
enum MPI_MAX_INFO_KEY       = 255;
enum MPI_MAX_INFO_VAL      = 1024;

/* for subarray and darray constructors */
enum MPI_ORDER_C              = 56;
enum MPI_ORDER_FORTRAN        = 57;
enum MPI_DISTRIBUTE_BLOCK    = 121;
enum MPI_DISTRIBUTE_CYCLIC   = 122;
enum MPI_DISTRIBUTE_NONE     = 123;
enum MPI_DISTRIBUTE_DFLT_DARG = -49767;

enum void* MPI_IN_PLACE  = -1;

/* asserts for one-sided communication */
enum MPI_MODE_NOCHECK      = 1024;
enum MPI_MODE_NOSTORE      = 2048;
enum MPI_MODE_NOPUT        = 4096;
enum MPI_MODE_NOPRECEDE    = 8192;
enum MPI_MODE_NOSUCCEED   = 16384 ;

/* predefined types for MPI_Comm_split_type */
enum MPI_COMM_TYPE_SHARED    = 1;

/* The order of these elements must match that in mpif.h, mpi_f08_types.f90,
   and mpi_c_interface_types.f90 */
struct MPI_Status {
    int count_lo;
    int count_hi_and_cancelled;
    int MPI_SOURCE;
    int MPI_TAG;
    int MPI_ERROR;
}

/* types for the MPI_T_ interface */
struct MPIR_T_enum_s;
struct MPIR_T_cvar_handle_s;
struct MPIR_T_pvar_handle_s;
struct MPIR_T_pvar_session_s;

alias MPI_T_enum = MPIR_T_enum_s*;
alias MPI_T_cvar_handle = MPIR_T_cvar_handle_s*;
alias MPI_T_pvar_handle = MPIR_T_pvar_handle_s*;
alias MPI_T_pvar_session = MPIR_T_pvar_session_s*;

/* extra const at front would be safer, but is incompatible with MPI_T_ prototypes */
extern MPIR_T_pvar_handle_s* MPI_T_PVAR_ALL_HANDLES;

enum MPI_T_enum MPI_T_ENUM_null         = null;
enum MPI_T_cvar_handle MPI_T_CVAR_HANDLE_null  = null;
enum MPI_T_pvar_handle MPI_T_PVAR_HANDLE_null  = null;
enum MPI_T_pvar_session MPI_T_PVAR_SESSION_null = null;

/* the MPI_T_ interface requires that these VERBOSITY constants occur in this
 * relative order with increasing values */
enum MPIR_T_verbosity_t {
    /* don't name-shift this if/when MPI_T_ is accepted, this is an MPICH-only
     * extension */
    MPIX_T_VERBOSITY_INVALID = 0,

    /* arbitrarily shift values to aid debugging and reduce accidental errors */
    MPI_T_VERBOSITY_USER_BASIC = 221,
    MPI_T_VERBOSITY_USER_DETAIL,
    MPI_T_VERBOSITY_USER_ALL,

    MPI_T_VERBOSITY_TUNER_BASIC,
    MPI_T_VERBOSITY_TUNER_DETAIL,
    MPI_T_VERBOSITY_TUNER_ALL,

    MPI_T_VERBOSITY_MPIDEV_BASIC,
    MPI_T_VERBOSITY_MPIDEV_DETAIL,
    MPI_T_VERBOSITY_MPIDEV_ALL
}

enum MPIR_T_bind_t {
    /* don't name-shift this if/when MPI_T_ is accepted, this is an MPICH-only
     * extension */
    MPIX_T_BIND_INVALID = 0,

    /* arbitrarily shift values to aid debugging and reduce accidental errors */
    MPI_T_BIND_NO_OBJECT = 9700,
    MPI_T_BIND_MPI_COMM,
    MPI_T_BIND_MPI_DATATYPE,
    MPI_T_BIND_MPI_ERRHANDLER,
    MPI_T_BIND_MPI_FILE,
    MPI_T_BIND_MPI_GROUP,
    MPI_T_BIND_MPI_OP,
    MPI_T_BIND_MPI_REQUEST,
    MPI_T_BIND_MPI_WIN,
    MPI_T_BIND_MPI_MESSAGE,
    MPI_T_BIND_MPI_INFO
}

enum MPIR_T_scope_t {
    /* don't name-shift this if/when MPI_T_ is accepted, this is an MPICH-only
     * extension */
    MPIX_T_SCOPE_INVALID = 0,

    /* arbitrarily shift values to aid debugging and reduce accidental errors */
    MPI_T_SCOPE_CONSTANT = 60438,
    MPI_T_SCOPE_READONLY,
    MPI_T_SCOPE_LOCAL,
    MPI_T_SCOPE_GROUP,
    MPI_T_SCOPE_GROUP_EQ,
    MPI_T_SCOPE_ALL,
    MPI_T_SCOPE_ALL_EQ
}

enum MPIR_T_pvar_class_t {
    /* don't name-shift this if/when MPI_T_ is accepted, this is an MPICH-only
     * extension */
    MPIX_T_PVAR_CLASS_INVALID = 0,

    /* arbitrarily shift values to aid debugging and reduce accidental errors */
    MPIR_T_PVAR_CLASS_FIRST = 240,
    MPI_T_PVAR_CLASS_STATE = MPIR_T_PVAR_CLASS_FIRST,
    MPI_T_PVAR_CLASS_LEVEL,
    MPI_T_PVAR_CLASS_SIZE,
    MPI_T_PVAR_CLASS_PERCENTAGE,
    MPI_T_PVAR_CLASS_HIGHWATERMARK,
    MPI_T_PVAR_CLASS_LOWWATERMARK,
    MPI_T_PVAR_CLASS_COUNTER,
    MPI_T_PVAR_CLASS_AGGREGATE,
    MPI_T_PVAR_CLASS_TIMER,
    MPI_T_PVAR_CLASS_GENERIC,
    MPIR_T_PVAR_CLASS_LAST,
    MPIR_T_PVAR_CLASS_NUMBER = MPIR_T_PVAR_CLASS_LAST - MPIR_T_PVAR_CLASS_FIRST
}

/* Handle conversion types/functions */

/* Programs that need to convert types used in MPICH should use these */
auto MPI_Comm_c2f(comm) { return cast(MPI_Fint)comm; }
auto MPI_Comm_f2c(comm) { return cast(MPI_Comm)comm; }
auto MPI_Type_c2f(datatype) { return cast(MPI_Fint)datatype; }
auto MPI_Type_f2c(datatype) { return cast(MPI_Datatype)datatype; }
auto MPI_Group_c2f(group) { return cast(MPI_Fint)group; }
auto MPI_Group_f2c(group) { return cast(MPI_Group)group; }
auto MPI_Info_c2f(info) { return cast(MPI_Fint)info; }
auto MPI_Info_f2c(info) { return cast(MPI_Info)info; }
auto MPI_Request_f2c(request) { return cast(MPI_Request)request; }
auto MPI_Request_c2f(request) { return cast(MPI_Fint)request; }
auto MPI_Op_c2f(op) { return cast(MPI_Fint)op; }
auto MPI_Op_f2c(op) { return cast(MPI_Op)op; }
auto MPI_Errhandler_c2f(errhandler) { return cast(MPI_Fint)errhandler; }
auto MPI_Errhandler_f2c(errhandler) { return cast(MPI_Errhandler)errhandler; }
auto MPI_Win_c2f(win)   { return cast(MPI_Fint)win; }
auto MPI_Win_f2c(win)   { return cast(MPI_Win)win; }
auto MPI_Message_c2f(msg) { return cast(MPI_Fint)msg; }
auto MPI_Message_f2c(msg) { return cast(MPI_Message)msg; }

/* PMPI versions of the handle transfer functions.  See section 4.17 */
auto PMPI_Comm_c2f(comm) { return cast(MPI_Fint)comm; }
auto PMPI_Comm_f2c(comm) { return cast(MPI_Comm)comm; }
auto PMPI_Type_c2f(datatype) { return cast(MPI_Fint)datatype; }
auto PMPI_Type_f2c(datatype) { return cast(MPI_Datatype)datatype; }
auto PMPI_Group_c2f(group) { return cast(MPI_Fint)group; }
auto PMPI_Group_f2c(group) { return cast(MPI_Group)group; }
auto PMPI_Info_c2f(info) { return cast(MPI_Fint)info; }
auto PMPI_Info_f2c(info) { return cast(MPI_Info)info; }
auto PMPI_Request_f2c(request) { return cast(MPI_Request)request; }
auto PMPI_Request_c2f(request) { return cast(MPI_Fint)request; }
auto PMPI_Op_c2f(op) { return cast(MPI_Fint)op; }
auto PMPI_Op_f2c(op) { return cast(MPI_Op)op; }
auto PMPI_Errhandler_c2f(errhandler) { return cast(MPI_Fint)errhandler; }
auto PMPI_Errhandler_f2c(errhandler) { return cast(MPI_Errhandler)errhandler; }
auto PMPI_Win_c2f(win)   { return cast(MPI_Fint)win; }
auto PMPI_Win_f2c(win)   { return cast(MPI_Win)win; }
auto PMPI_Message_c2f(msg) { return cast(MPI_Fint)msg; }
auto PMPI_Message_f2c(msg) { return cast(MPI_Message)msg; }

enum MPI_Status* MPI_STATUS_IGNORE = 1;
enum MPI_Status* MPI_STATUSES_IGNORE = 1;
enum int* MPI_ERRCODES_IGNORE = 0;

extern MPI_Fint* MPI_F_STATUS_IGNORE;
extern MPI_Fint* MPI_F_STATUSES_IGNORE;

/* The MPI standard requires that the ARGV_NULL values be the same as
   NULL (see 5.3.2) */
enum MPI_ARGV_NULL = cast(char **)null;
enum MPI_ARGVS_NULL = cast(char ***)null;

/* C type for MPI_STATUS in F08.
   The field order should match that in mpi_f08_types.f90, and mpi_c_interface_types.f90.
 */
struct MPI_F08_Status {
    MPI_Fint count_lo;
    MPI_Fint count_hi_and_cancelled;
    MPI_Fint MPI_SOURCE;
    MPI_Fint MPI_TAG;
    MPI_Fint MPI_ERROR;
};

extern MPI_F08_Status MPIR_F08_MPI_STATUS_IGNORE_OBJ;
extern MPI_F08_Status[1] MPIR_F08_MPI_STATUSES_IGNORE_OBJ;
extern int MPIR_F08_MPI_IN_PLACE;
extern int MPIR_F08_MPI_BOTTOM;

/* Pointers to above objects */
extern MPI_F08_Status* MPI_F08_STATUS_IGNORE;
extern MPI_F08_Status* MPI_F08_STATUSES_IGNORE;

/* For supported thread levels */
enum MPI_THREAD_SINGLE = 0;
enum MPI_THREAD_FUNNELED = 1;
enum MPI_THREAD_SERIALIZED = 2;
enum MPI_THREAD_MULTIPLE = 3;

/* Typedefs for generalized requests */
alias MPI_Grequest_cancel_function = int function (void *, int); 
alias MPI_Grequest_free_function = int function (void *); 
alias MPI_Grequest_query_function = int function (void *, MPI_Status *); 
alias MPIX_Grequest_poll_function = int function (void *, MPI_Status *);
alias MPIX_Grequest_wait_function = int function (int, void **, double, MPI_Status *);

/* MPI's error classes */
enum MPI_SUCCESS          = 0;      /* Successful return code */
/* Communication argument parameters */
enum MPI_ERR_BUFFER       = 1;      /* Invalid buffer pointer */
enum MPI_ERR_COUNT        = 2;      /* Invalid count argument */
enum MPI_ERR_TYPE         = 3;      /* Invalid datatype argument */
enum MPI_ERR_TAG          = 4;      /* Invalid tag argument */
enum MPI_ERR_COMM         = 5;      /* Invalid communicator */
enum MPI_ERR_RANK         = 6;      /* Invalid rank */
enum MPI_ERR_ROOT         = 7;      /* Invalid root */
enum MPI_ERR_TRUNCATE    = 14;      /* Message truncated on receive */

/* MPI Objects (other than COMM) */
enum MPI_ERR_GROUP       =  8;      /* Invalid group */
enum MPI_ERR_OP          =  9;      /* Invalid operation */
enum MPI_ERR_REQUEST     = 19;      /* Invalid mpi_request handle */

/* Special topology argument parameters */
enum MPI_ERR_TOPOLOGY    = 10;      /* Invalid topology */
enum MPI_ERR_DIMS        = 11;      /* Invalid dimension argument */

/* All other arguments.  This is a class with many kinds */
enum MPI_ERR_ARG         = 12;      /* Invalid argument */

/* Other errors that are not simply an invalid argument */
enum MPI_ERR_OTHER       = 15;      /* Other error; use Error_string */

enum MPI_ERR_UNKNOWN     = 13;      /* Unknown error */
enum MPI_ERR_INTERN      = 16;      /* Internal error code    */

/* Multiple completion has three special error classes */
enum MPI_ERR_IN_STATUS           = 17;      /* Look in status for error value */
enum MPI_ERR_PENDING             = 18;      /* Pending request */

/* New MPI-2 Error classes */
enum MPI_ERR_ACCESS      = 20;      /* */
enum MPI_ERR_AMODE       = 21;      /* */
enum MPI_ERR_BAD_FILE    = 22;      /* */
enum MPI_ERR_CONVERSION  = 23;      /* */
enum MPI_ERR_DUP_DATAREP = 24;      /* */
enum MPI_ERR_FILE_EXISTS = 25;      /* */
enum MPI_ERR_FILE_IN_USE = 26;      /* */
enum MPI_ERR_FILE        = 27;      /* */
enum MPI_ERR_IO          = 32;      /* */
enum MPI_ERR_NO_SPACE    = 36;      /* */
enum MPI_ERR_NO_SUCH_FILE = 37;     /* */
enum MPI_ERR_READ_ONLY   = 40;      /* */
enum MPI_ERR_UNSUPPORTED_DATAREP   = 43;  /* */

/* MPI_ERR_INFO is NOT defined in the MPI-2 standard.  I believe that
   this is an oversight */
enum MPI_ERR_INFO        = 28;      /* */
enum MPI_ERR_INFO_KEY    = 29;      /* */
enum MPI_ERR_INFO_VALUE  = 30;      /* */
enum MPI_ERR_INFO_NOKEY  = 31;      /* */

enum MPI_ERR_NAME        = 33;      /* */
enum MPI_ERR_NO_MEM      = 34;      /* Alloc_mem could not allocate memory */
enum MPI_ERR_NOT_SAME    = 35;      /* */
enum MPI_ERR_PORT        = 38;      /* */
enum MPI_ERR_QUOTA       = 39;      /* */
enum MPI_ERR_SERVICE     = 41;      /* */
enum MPI_ERR_SPAWN       = 42;      /* */
enum MPI_ERR_UNSUPPORTED_OPERATION = 44; /* */
enum MPI_ERR_WIN         = 45;      /* */

enum MPI_ERR_BASE        = 46;      /* */
enum MPI_ERR_LOCKTYPE    = 47;      /* */
enum MPI_ERR_KEYVAL      = 48;      /* Erroneous attribute key */
enum MPI_ERR_RMA_CONFLICT = 49;     /* */
enum MPI_ERR_RMA_SYNC    = 50;      /* */ 
enum MPI_ERR_SIZE        = 51;      /* */
enum MPI_ERR_DISP        = 52;      /* */
enum MPI_ERR_ASSERT      = 53;      /* */

enum MPI_ERR_RMA_RANGE  = 55;       /* */
enum MPI_ERR_RMA_ATTACH = 56;       /* */
enum MPI_ERR_RMA_SHARED = 57;       /* */
enum MPI_ERR_RMA_FLAVOR = 58;       /* */

/* Return codes for functions in the MPI Tool Information Interface */
enum MPI_T_ERR_MEMORY            = 59;  /* Out of memory */
enum MPI_T_ERR_NOT_INITIALIZED   = 60;  /* Interface not initialized */
enum MPI_T_ERR_CANNOT_INIT       = 61;  /* Interface not in the state to
                                           be initialized */
enum MPI_T_ERR_INVALID_INDEX     = 62;  /* The index is invalid or
                                           has been deleted  */
enum MPI_T_ERR_INVALID_ITEM      = 63;  /* Item index queried is out of range */
enum MPI_T_ERR_INVALID_HANDLE    = 64;  /* The handle is invalid */
enum MPI_T_ERR_OUT_OF_HANDLES    = 65;  /* No more handles available */
enum MPI_T_ERR_OUT_OF_SESSIONS   = 66;  /* No more sessions available */
enum MPI_T_ERR_INVALID_SESSION   = 67;  /* Session argument is not valid */
enum MPI_T_ERR_CVAR_SET_NOT_NOW  = 68;  /* Cvar can't be set at this moment */
enum MPI_T_ERR_CVAR_SET_NEVER    = 69;  /* Cvar can't be set until
                                           end of execution */
enum MPI_T_ERR_PVAR_NO_STARTSTOP = 70;  /* Pvar can't be started or stopped */
enum MPI_T_ERR_PVAR_NO_WRITE     = 71;  /* Pvar can't be written or reset */
enum MPI_T_ERR_PVAR_NO_ATOMIC    = 72;  /* Pvar can't be R/W atomically */


enum MPI_ERR_LASTCODE    = 0x3fffffff;  /* Last valid error code for a 
					   predefined error class */
/* WARNING: this is also defined in mpishared.h.  Update both locations */
enum MPICH_ERR_LAST_CLASS = 72;     /* It is also helpful to know the
				       last valid class */

enum MPICH_ERR_FIRST_MPIX = 100; /* Define a gap here because sock is
                                  * already using some of the values in this
                                  * range. All MPIX error codes will be
                                  * above this value to be ABI complaint. */

enum MPIX_ERR_PROC_FAILED          = MPICH_ERR_FIRST_MPIX+1; /* Process failure */
enum MPIX_ERR_PROC_FAILED_PENDING  = MPICH_ERR_FIRST_MPIX+2; /* A failure has caused this request
                                                              * to be pending */
enum MPIX_ERR_REVOKED              = MPICH_ERR_FIRST_MPIX+3; /* The communciation object has been revoked */

enum MPICH_ERR_LAST_MPIX           = MPICH_ERR_FIRST_MPIX+3;


/* End of MPI's error classes */

/* Function type defs */
alias MPI_Datarep_conversion_function = int function (void *, MPI_Datatype, int, 
             void *, MPI_Offset, void *);
alias MPI_Datarep_extent_function = int function (MPI_Datatype datatype, MPI_Aint *,
                      void *);
enum MPI_Datarep_conversion_function MPI_CONVERSION_FN_NULL = null;



/*
 * MPI API
 */
//TODO properly version the API from here down
int MPI_Abort(MPI_Comm comm, int errorcode);
int MPI_Accumulate(void* origin_addr, int origin_count, MPI_Datatype origin_datatype,
        int target_rank, MPI_Aint target_disp, int target_count,
        MPI_Datatype target_datatype, MPI_Op op, MPI_Win win);
int MPI_Add_error_class(int* errorclass);
int MPI_Add_error_code(int errorclass, int* errorcode);
int MPI_Add_error_string(int errorcode, char* string);
int MPI_Allgather(void* sendbuf, int sendcount, MPI_Datatype sendtype,
        void* recvbuf, int recvcount,
        MPI_Datatype recvtype, MPI_Comm comm);
int MPI_Iallgather(void* sendbuf, int sendcount, MPI_Datatype sendtype,
        void* recvbuf, int recvcount,
        MPI_Datatype recvtype, MPI_Comm comm, MPI_Request* request);
int MPI_Allgatherv(void* sendbuf, int sendcount, MPI_Datatype sendtype,
        void* recvbuf, int* recvcounts,
        int* displs, MPI_Datatype recvtype, MPI_Comm comm);
int MPI_Iallgatherv(void* sendbuf, int sendcount, MPI_Datatype sendtype,
        void* recvbuf, int* recvcounts,
        int* displs, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request* request);
int MPI_Alloc_mem(MPI_Aint size, MPI_Info info,
        void* baseptr);
int MPI_Allreduce(void* sendbuf, void* recvbuf, int count,
        MPI_Datatype datatype, MPI_Op op, MPI_Comm comm);
int MPI_Iallreduce(void* sendbuf, void* recvbuf, int count,
        MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request* request);
int MPI_Alltoall(void* sendbuf, int sendcount, MPI_Datatype sendtype,
        void* recvbuf, int recvcount,
        MPI_Datatype recvtype, MPI_Comm comm);
int MPI_Ialltoall(void* sendbuf, int sendcount, MPI_Datatype sendtype,
        void* recvbuf, int recvcount,
        MPI_Datatype recvtype, MPI_Comm comm, MPI_Request* request);
int MPI_Alltoallv(void* sendbuf, int* sendcounts, int* sdispls,
        MPI_Datatype sendtype, void* recvbuf, int* recvcounts,
        int* rdispls, MPI_Datatype recvtype, MPI_Comm comm);
int MPI_Ialltoallv(void* sendbuf, int* sendcounts, int* sdispls,
        MPI_Datatype sendtype, void* recvbuf, int* recvcounts,
        int* rdispls, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request* request);
int MPI_Alltoallw(void* sendbuf, int* sendcounts, int* sdispls, MPI_Datatype* sendtypes,
        void* recvbuf, int* recvcounts, int* rdispls, MPI_Datatype* recvtypes,
        MPI_Comm comm);
int MPI_Ialltoallw(void* sendbuf, int* sendcounts, int* sdispls, MPI_Datatype* sendtypes,
        void* recvbuf, int* recvcounts, int* rdispls, MPI_Datatype* recvtypes,
        MPI_Comm comm, MPI_Request* request);
int MPI_Barrier(MPI_Comm comm);
int MPI_Ibarrier(MPI_Comm comm, MPI_Request* request);
int MPI_Bcast(void* buffer, int count, MPI_Datatype datatype,
        int root, MPI_Comm comm);
int MPI_Bsend(void* buf, int count, MPI_Datatype datatype,
        int dest, int tag, MPI_Comm comm);
int MPI_Ibcast(void* buffer, int count, MPI_Datatype datatype,
        int root, MPI_Comm comm,
        MPI_Request* request);
int MPI_Bsend_init(void* buf, int count, MPI_Datatype datatype,
        int dest, int tag, MPI_Comm comm, MPI_Request* request);
int MPI_Buffer_attach(void* buffer, int size);
int MPI_Buffer_detach(void* buffer, int* size);
int MPI_Cancel(MPI_Request* request);
int MPI_Cart_coords(MPI_Comm comm, int rank, int maxdims, int* coords);
int MPI_Cart_create(MPI_Comm old_comm, int ndims, int* dims,
        int* periods, int reorder, MPI_Comm* comm_cart);
int MPI_Cart_get(MPI_Comm comm, int maxdims, int* dims,
        int* periods, int* coords);
int MPI_Cart_map(MPI_Comm comm, int ndims, int* dims,
        int* periods, int* newrank);
int MPI_Cart_rank(MPI_Comm comm, int* coords, int* rank);
int MPI_Cart_shift(MPI_Comm comm, int direction, int disp,
        int* rank_source, int* rank_dest);
int MPI_Cart_sub(MPI_Comm comm, int* remain_dims, MPI_Comm* new_comm);
int MPI_Cartdim_get(MPI_Comm comm, int* ndims);
int MPI_Close_port(char* port_name);
int MPI_Comm_accept(char* port_name, MPI_Info info, int root,
        MPI_Comm comm, MPI_Comm* newcomm);
MPI_Fint MPI_Comm_c2f(MPI_Comm comm);
int MPI_Comm_call_errhandler(MPI_Comm comm, int errorcode);
int MPI_Comm_compare(MPI_Comm comm1, MPI_Comm comm2, int* result);
int MPI_Comm_connect(char* port_name, MPI_Info info, int root,
        MPI_Comm comm, MPI_Comm* newcomm);
int MPI_Comm_create_errhandler(MPI_Comm_errhandler_function* function_,
        MPI_Errhandler* errhandler);
int MPI_Comm_create_keyval(MPI_Comm_copy_attr_function* comm_copy_attr_fn,
        MPI_Comm_delete_attr_function* comm_delete_attr_fn,
        int* comm_keyval, void* extra_state);
int MPI_Comm_create_group(MPI_Comm comm, MPI_Group group, int tag, MPI_Comm* newcomm);
int MPI_Comm_create(MPI_Comm comm, MPI_Group group, MPI_Comm* newcomm);
int MPI_Comm_delete_attr(MPI_Comm comm, int comm_keyval);
int MPI_Comm_disconnect(MPI_Comm* comm);
int MPI_Comm_dup(MPI_Comm comm, MPI_Comm* newcomm);
int MPI_Comm_idup(MPI_Comm comm, MPI_Comm* newcomm, MPI_Request* request);
int MPI_Comm_dup_with_info(MPI_Comm comm, MPI_Info info, MPI_Comm* newcomm);
MPI_Comm MPI_Comm_f2c(MPI_Fint comm);
int MPI_Comm_free_keyval(int* comm_keyval);
int MPI_Comm_free(MPI_Comm* comm);
int MPI_Comm_get_attr(MPI_Comm comm, int comm_keyval,
        void* attribute_val, int* flag);
int MPI_Dist_graph_create(MPI_Comm comm_old, int n, int* nodes,
        int* degrees, int* targets,
        int* weights, MPI_Info info,
        int reorder, MPI_Comm*  newcomm);
int MPI_Dist_graph_create_adjacent(MPI_Comm comm_old,
        int indegree, int* sources,
        int* sourceweights,
        int outdegree,
        int* destinations,
        int* destweights,
        MPI_Info info, int reorder,
        MPI_Comm* comm_dist_graph);
int MPI_Dist_graph_neighbors(MPI_Comm comm, int maxindegree,
        int* sources, int* sourceweights,
        int maxoutdegree,
        int* destinations,
        int* destweights);
int MPI_Dist_graph_neighbors_count(MPI_Comm comm,
        int* inneighbors,
        int* outneighbors,
        int* weighted);
int MPI_Comm_get_errhandler(MPI_Comm comm, MPI_Errhandler* erhandler);
int MPI_Comm_get_info(MPI_Comm comm, MPI_Info* info_used);
int MPI_Comm_get_name(MPI_Comm comm, char* comm_name, int* resultlen);
int MPI_Comm_get_parent(MPI_Comm* parent);
int MPI_Comm_group(MPI_Comm comm, MPI_Group* group);
int MPI_Comm_join(int fd, MPI_Comm* intercomm);
int MPI_Comm_rank(MPI_Comm comm, int* rank);
int MPI_Comm_remote_group(MPI_Comm comm, MPI_Group* group);
int MPI_Comm_remote_size(MPI_Comm comm, int* size);
int MPI_Comm_set_attr(MPI_Comm comm, int comm_keyval, void* attribute_val);
int MPI_Comm_set_errhandler(MPI_Comm comm, MPI_Errhandler errhandler);
int MPI_Comm_set_info(MPI_Comm comm, MPI_Info info);
int MPI_Comm_set_name(MPI_Comm comm, char* comm_name);
int MPI_Comm_size(MPI_Comm comm, int* size);
int MPI_Comm_spawn(char* command, char** argv, int maxprocs, MPI_Info info,
        int root, MPI_Comm comm, MPI_Comm* intercomm,
        int* array_of_errcodes);
int MPI_Comm_spawn_multiple(int count, char** array_of_commands, char*** array_of_argv,
        int* array_of_maxprocs, MPI_Info* array_of_info,
        int root, MPI_Comm comm, MPI_Comm* intercomm,
        int* array_of_errcodes);
int MPI_Comm_split(MPI_Comm comm, int color, int key, MPI_Comm* newcomm);
int MPI_Comm_split_type(MPI_Comm comm, int split_type, int key, MPI_Info info, MPI_Comm* newcomm);
int MPI_Comm_test_inter(MPI_Comm comm, int* flag);
int MPI_Compare_and_swap(void* origin_addr, void* compare_addr,
        void* result_addr, MPI_Datatype datatype, int target_rank,
        MPI_Aint target_disp, MPI_Win win);
int MPI_Dims_create(int nnodes, int ndims, int* dims);
MPI_Fint MPI_Errhandler_c2f(MPI_Errhandler errhandler);
MPI_Errhandler MPI_Errhandler_f2c(MPI_Fint errhandler);
int MPI_Errhandler_free(MPI_Errhandler* errhandler);
int MPI_Error_class(int errorcode, int* errorclass);
int MPI_Error_string(int errorcode, char* string, int* resultlen);
int MPI_Exscan(void* sendbuf, void* recvbuf, int count,
        MPI_Datatype datatype, MPI_Op op, MPI_Comm comm);
int MPI_Fetch_and_op(void* origin_addr, void* result_addr, MPI_Datatype datatype,
        int target_rank, MPI_Aint target_disp, MPI_Op op, MPI_Win win);
int MPI_Iexscan(void* sendbuf, void* recvbuf, int count,
        MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request* request);

static if (OMPI_PROVIDE_MPI_FILE_INTERFACE)
{
    MPI_Fint MPI_File_c2f(MPI_File file);
    MPI_File MPI_File_f2c(MPI_Fint file);
    int MPI_File_call_errhandler(MPI_File fh, int errorcode);
    int MPI_File_create_errhandler(MPI_File_errhandler_function* function_,
            MPI_Errhandler* errhandler);
    int MPI_File_set_errhandler( MPI_File file, MPI_Errhandler errhandler);
    int MPI_File_get_errhandler( MPI_File file, MPI_Errhandler* errhandler);
    int MPI_File_open(MPI_Comm comm, char* filename, int amode,
            MPI_Info info, MPI_File* fh);
    int MPI_File_close(MPI_File* fh);
    int MPI_File_delete(char* filename, MPI_Info info);
    int MPI_File_set_size(MPI_File fh, MPI_Offset size);
    int MPI_File_preallocate(MPI_File fh, MPI_Offset size);
    int MPI_File_get_size(MPI_File fh, MPI_Offset* size);
    int MPI_File_get_group(MPI_File fh, MPI_Group* group);
    int MPI_File_get_amode(MPI_File fh, int* amode);
    int MPI_File_set_info(MPI_File fh, MPI_Info info);
    int MPI_File_get_info(MPI_File fh, MPI_Info* info_used);
    int MPI_File_set_view(MPI_File fh, MPI_Offset disp, MPI_Datatype etype,
            MPI_Datatype filetype, char* datarep, MPI_Info info);
    int MPI_File_get_view(MPI_File fh, MPI_Offset* disp,
            MPI_Datatype* etype,
            MPI_Datatype* filetype, char* datarep);
    int MPI_File_read_at(MPI_File fh, MPI_Offset offset, void* buf,
            int count, MPI_Datatype datatype, MPI_Status* status);
    int MPI_File_read_at_all(MPI_File fh, MPI_Offset offset, void* buf,
            int count, MPI_Datatype datatype, MPI_Status* status);
    int MPI_File_write_at(MPI_File fh, MPI_Offset offset, void* buf,
            int count, MPI_Datatype datatype, MPI_Status* status);
    int MPI_File_write_at_all(MPI_File fh, MPI_Offset offset, void* buf,
            int count, MPI_Datatype datatype, MPI_Status* status);
    int MPI_File_iread_at(MPI_File fh, MPI_Offset offset, void* buf,
            int count, MPI_Datatype datatype, MPI_Request* request);
    int MPI_File_iwrite_at(MPI_File fh, MPI_Offset offset, void* buf,
            int count, MPI_Datatype datatype, MPI_Request* request);
    int MPI_File_read(MPI_File fh, void* buf, int count,
            MPI_Datatype datatype, MPI_Status* status);
    int MPI_File_read_all(MPI_File fh, void* buf, int count,
            MPI_Datatype datatype, MPI_Status* status);
    int MPI_File_write(MPI_File fh, void* buf, int count,
            MPI_Datatype datatype, MPI_Status* status);
    int MPI_File_write_all(MPI_File fh, void* buf, int count,
            MPI_Datatype datatype, MPI_Status* status);
    int MPI_File_iread(MPI_File fh, void* buf, int count,
            MPI_Datatype datatype, MPI_Request* request);
    int MPI_File_iwrite(MPI_File fh, void* buf, int count,
            MPI_Datatype datatype, MPI_Request* request);
    int MPI_File_seek(MPI_File fh, MPI_Offset offset, int whence);
    int MPI_File_get_position(MPI_File fh, MPI_Offset* offset);
    int MPI_File_get_byte_offset(MPI_File fh, MPI_Offset offset,
            MPI_Offset* disp);
    int MPI_File_read_shared(MPI_File fh, void* buf, int count,
            MPI_Datatype datatype, MPI_Status* status);
    int MPI_File_write_shared(MPI_File fh, void* buf, int count,
            MPI_Datatype datatype, MPI_Status* status);
    int MPI_File_iread_shared(MPI_File fh, void* buf, int count,
            MPI_Datatype datatype, MPI_Request* request);
    int MPI_File_iwrite_shared(MPI_File fh, void* buf, int count,
            MPI_Datatype datatype, MPI_Request* request);
    int MPI_File_read_ordered(MPI_File fh, void* buf, int count,
            MPI_Datatype datatype, MPI_Status* status);
    int MPI_File_write_ordered(MPI_File fh, void* buf, int count,
            MPI_Datatype datatype, MPI_Status* status);
    int MPI_File_seek_shared(MPI_File fh, MPI_Offset offset, int whence);
    int MPI_File_get_position_shared(MPI_File fh, MPI_Offset* offset);
    int MPI_File_read_at_all_begin(MPI_File fh, MPI_Offset offset, void* buf,
            int count, MPI_Datatype datatype);
    int MPI_File_read_at_all_end(MPI_File fh, void* buf, MPI_Status* status);
    int MPI_File_write_at_all_begin(MPI_File fh, MPI_Offset offset, void* buf,
            int count, MPI_Datatype datatype);
    int MPI_File_write_at_all_end(MPI_File fh, void* buf, MPI_Status* status);
    int MPI_File_read_all_begin(MPI_File fh, void* buf, int count,
            MPI_Datatype datatype);
    int MPI_File_read_all_end(MPI_File fh, void* buf, MPI_Status* status);
    int MPI_File_write_all_begin(MPI_File fh, void* buf, int count,
            MPI_Datatype datatype);
    int MPI_File_write_all_end(MPI_File fh, void* buf, MPI_Status* status);
    int MPI_File_read_ordered_begin(MPI_File fh, void* buf, int count,
            MPI_Datatype datatype);
    int MPI_File_read_ordered_end(MPI_File fh, void* buf, MPI_Status* status);
    int MPI_File_write_ordered_begin(MPI_File fh, void* buf, int count,
            MPI_Datatype datatype);
    int MPI_File_write_ordered_end(MPI_File fh, void* buf, MPI_Status* status);
    int MPI_File_get_type_extent(MPI_File fh, MPI_Datatype datatype,
            MPI_Aint* extent);
    int MPI_File_set_atomicity(MPI_File fh, int flag);
    int MPI_File_get_atomicity(MPI_File fh, int* flag);
    int MPI_File_sync(MPI_File fh);
}/* #if OMPI_PROVIDE_MPI_FILE_INTERFACE */

int MPI_Finalize();
int MPI_Finalized(int* flag);
int MPI_Free_mem(void* base);
int MPI_Gather(void* sendbuf, int sendcount, MPI_Datatype sendtype,
        void* recvbuf, int recvcount, MPI_Datatype recvtype,
        int root, MPI_Comm comm);
int MPI_Igather(void* sendbuf, int sendcount, MPI_Datatype sendtype,
        void* recvbuf, int recvcount, MPI_Datatype recvtype,
        int root, MPI_Comm comm, MPI_Request* request);
int MPI_Gatherv(void* sendbuf, int sendcount, MPI_Datatype sendtype,
        void* recvbuf, int* recvcounts, int* displs,
        MPI_Datatype recvtype, int root, MPI_Comm comm);
int MPI_Igatherv(void* sendbuf, int sendcount, MPI_Datatype sendtype,
        void* recvbuf, int* recvcounts, int* displs,
        MPI_Datatype recvtype, int root, MPI_Comm comm, MPI_Request* request);
int MPI_Get_address(void* location, MPI_Aint* address);
int MPI_Get_count(MPI_Status* status, MPI_Datatype datatype, int* count);
int MPI_Get_elements(MPI_Status* status, MPI_Datatype datatype, int* count);
static if(OMPI_MAJOR_VERSION == 1 && OMPI_MINOR_VERSION >= 8)
    int MPI_Get_elements_x(MPI_Status* status, MPI_Datatype datatype, MPI_Count* count);
int MPI_Get(void* origin_addr, int origin_count,
        MPI_Datatype origin_datatype, int target_rank,
        MPI_Aint target_disp, int target_count,
        MPI_Datatype target_datatype, MPI_Win win);
int MPI_Get_accumulate(void* origin_addr, int origin_count, MPI_Datatype origin_datatype,
        void* result_addr, int result_count, MPI_Datatype result_datatype,
        int target_rank, MPI_Aint target_disp, int target_count,
        MPI_Datatype target_datatype, MPI_Op op, MPI_Win win);
int MPI_Get_library_version(char* version_, int* resultlen);
int MPI_Get_processor_name(char* name, int* resultlen);
int MPI_Get_version(int* version_, int* subversion);
int MPI_Graph_create(MPI_Comm comm_old, int nnodes, int* index,
        int* edges, int reorder, MPI_Comm* comm_graph);
int MPI_Graph_get(MPI_Comm comm, int maxindex, int maxedges,
        int* index, int* edges);
int MPI_Graph_map(MPI_Comm comm, int nnodes, int* index, int* edges,
        int* newrank);
int MPI_Graph_neighbors_count(MPI_Comm comm, int rank, int* nneighbors);
int MPI_Graph_neighbors(MPI_Comm comm, int rank, int maxneighbors,
        int* neighbors);
int MPI_Graphdims_get(MPI_Comm comm, int* nnodes, int* nedges);
int MPI_Grequest_complete(MPI_Request request);
int MPI_Grequest_start(MPI_Grequest_query_function* query_fn,
        MPI_Grequest_free_function* free_fn,
        MPI_Grequest_cancel_function* cancel_fn,
        void* extra_state, MPI_Request* request);
MPI_Fint MPI_Group_c2f(MPI_Group group);
int MPI_Group_compare(MPI_Group group1, MPI_Group group2, int* result);
int MPI_Group_difference(MPI_Group group1, MPI_Group group2,
        MPI_Group* newgroup);
int MPI_Group_excl(MPI_Group group, int n, int* ranks,
        MPI_Group* newgroup);
MPI_Group MPI_Group_f2c(MPI_Fint group);
int MPI_Group_free(MPI_Group* group);
int MPI_Group_incl(MPI_Group group, int n, int* ranks,
        MPI_Group* newgroup);
int MPI_Group_intersection(MPI_Group group1, MPI_Group group2,
        MPI_Group* newgroup);
int MPI_Group_range_excl(MPI_Group group, int n, int[3]* ranges,
        MPI_Group* newgroup);
int MPI_Group_range_incl(MPI_Group group, int n, int[3]* ranges,
        MPI_Group* newgroup);
int MPI_Group_rank(MPI_Group group, int* rank);
int MPI_Group_size(MPI_Group group, int* size);
int MPI_Group_translate_ranks(MPI_Group group1, int n, int* ranks1,
        MPI_Group group2, int* ranks2);
int MPI_Group_union(MPI_Group group1, MPI_Group group2,
        MPI_Group* newgroup);
int MPI_Ibsend(void* buf, int count, MPI_Datatype datatype, int dest,
        int tag, MPI_Comm comm, MPI_Request* request);
static if(OMPI_MAJOR_VERSION == 1 && OMPI_MINOR_VERSION >= 8)
{
    int MPI_Improbe(int source, int tag, MPI_Comm comm,
        int* flag, MPI_Message* message,
        MPI_Status* status);
    int MPI_Imrecv(void* buf, int count, MPI_Datatype type,
        MPI_Message* message, MPI_Request* request);
}
MPI_Fint MPI_Info_c2f(MPI_Info info);
int MPI_Info_create(MPI_Info* info);
int MPI_Info_delete(MPI_Info info, char* key);
int MPI_Info_dup(MPI_Info info, MPI_Info* newinfo);
MPI_Info MPI_Info_f2c(MPI_Fint info);
int MPI_Info_free(MPI_Info* info);
int MPI_Info_get(MPI_Info info, char* key, int valuelen,
        char* value, int* flag);
int MPI_Info_get_nkeys(MPI_Info info, int* nkeys);
int MPI_Info_get_nthkey(MPI_Info info, int n, char* key);
int MPI_Info_get_valuelen(MPI_Info info, char* key, int* valuelen,
        int* flag);
int MPI_Info_set(MPI_Info info, char* key, char* value);
int MPI_Init(int* argc, char*** argv);
int MPI_Initialized(int* flag);
int MPI_Init_thread(int* argc, char*** argv, int required,
        int* provided);
int MPI_Intercomm_create(MPI_Comm local_comm, int local_leader,
        MPI_Comm bridge_comm, int remote_leader,
        int tag, MPI_Comm* newintercomm);
int MPI_Intercomm_merge(MPI_Comm intercomm, int high,
        MPI_Comm* newintercomm);
int MPI_Iprobe(int source, int tag, MPI_Comm comm, int* flag,
        MPI_Status* status);
int MPI_Irecv(void* buf, int count, MPI_Datatype datatype, int source,
        int tag, MPI_Comm comm, MPI_Request* request);
int MPI_Irsend(void* buf, int count, MPI_Datatype datatype, int dest,
        int tag, MPI_Comm comm, MPI_Request* request);
int MPI_Isend(void* buf, int count, MPI_Datatype datatype, int dest,
        int tag, MPI_Comm comm, MPI_Request* request);
int MPI_Issend(void* buf, int count, MPI_Datatype datatype, int dest,
        int tag, MPI_Comm comm, MPI_Request* request);
int MPI_Is_thread_main(int* flag);
int MPI_Lookup_name(char* service_name, MPI_Info info, char* port_name);
static if(OMPI_MAJOR_VERSION == 1 && OMPI_MINOR_VERSION >= 8)
{
    MPI_Fint MPI_Message_c2f(MPI_Message message);
    MPI_Message MPI_Message_f2c(MPI_Fint message);
    int MPI_Mprobe(int source, int tag, MPI_Comm comm,
        MPI_Message* message,
        MPI_Status* status);
    int MPI_Mrecv(void* buf, int count, MPI_Datatype type,
        MPI_Message* message, MPI_Status* status);
}
int MPI_Neighbor_allgather(void* sendbuf, int sendcount, MPI_Datatype sendtype,
        void* recvbuf, int recvcount, MPI_Datatype recvtype,
        MPI_Comm comm);
int MPI_Ineighbor_allgather(void* sendbuf, int sendcount, MPI_Datatype sendtype,
        void* recvbuf, int recvcount, MPI_Datatype recvtype,
        MPI_Comm comm, MPI_Request* request);
int MPI_Neighbor_allgatherv(void* sendbuf, int sendcount, MPI_Datatype sendtype,
        void* recvbuf, int* recvcounts, int* displs,
        MPI_Datatype recvtype, MPI_Comm comm);
int MPI_Ineighbor_allgatherv(void* sendbuf, int sendcount, MPI_Datatype sendtype,
        void* recvbuf, int* recvcounts, int* displs,
        MPI_Datatype recvtype, MPI_Comm comm, MPI_Request* request);
int MPI_Neighbor_alltoall(void* sendbuf, int sendcount, MPI_Datatype sendtype,
        void* recvbuf, int recvcount, MPI_Datatype recvtype,
        MPI_Comm comm);
int MPI_Ineighbor_alltoall(void* sendbuf, int sendcount, MPI_Datatype sendtype,
        void* recvbuf, int recvcount, MPI_Datatype recvtype,
        MPI_Comm comm, MPI_Request* request);
int MPI_Neighbor_alltoallv(void* sendbuf, int* sendcounts, int* sdispls,  MPI_Datatype sendtype,
        void* recvbuf, int* recvcounts, int* rdispls, MPI_Datatype recvtype,
        MPI_Comm comm);
int MPI_Ineighbor_alltoallv(void* sendbuf, int* sendcounts, int* sdispls, MPI_Datatype sendtype,
        void* recvbuf, int* recvcounts, int* rdispls, MPI_Datatype recvtype,
        MPI_Comm comm, MPI_Request* request);
int MPI_Neighbor_alltoallw(void* sendbuf, int* sendcounts, MPI_Aint* sdispls, MPI_Datatype* sendtypes,
        void* recvbuf, int* recvcounts, MPI_Aint* rdispls, MPI_Datatype* recvtypes,
        MPI_Comm comm);
int MPI_Ineighbor_alltoallw(void* sendbuf, int* sendcounts, MPI_Aint* sdispls, MPI_Datatype* sendtypes,
        void* recvbuf, int* recvcounts, MPI_Aint* rdispls, MPI_Datatype* recvtypes,
        MPI_Comm comm, MPI_Request* request);
MPI_Fint MPI_Op_c2f(MPI_Op op);
int MPI_Op_commutative(MPI_Op op, int* commute);
int MPI_Op_create(MPI_User_function* function_, int commute, MPI_Op* op);
int MPI_Open_port(MPI_Info info, char* port_name);
MPI_Op MPI_Op_f2c(MPI_Fint op);
int MPI_Op_free(MPI_Op* op);
int MPI_Pack_external(char* datarep, void* inbuf, int incount,
        MPI_Datatype datatype, void* outbuf,
        MPI_Aint outsize, MPI_Aint* position);
int MPI_Pack_external_size(char* datarep, int incount,
        MPI_Datatype datatype, MPI_Aint* size);
int MPI_Pack(void* inbuf, int incount, MPI_Datatype datatype,
        void* outbuf, int outsize, int* position, MPI_Comm comm);
int MPI_Pack_size(int incount, MPI_Datatype datatype, MPI_Comm comm,
        int* size);
int MPI_Pcontrol(int level, ...);
int MPI_Probe(int source, int tag, MPI_Comm comm, MPI_Status* status);
int MPI_Publish_name(char* service_name, MPI_Info info,
        char* port_name);
int MPI_Put(void* origin_addr, int origin_count, MPI_Datatype origin_datatype,
        int target_rank, MPI_Aint target_disp, int target_count,
        MPI_Datatype target_datatype, MPI_Win win);
int MPI_Query_thread(int* provided);
int MPI_Raccumulate(void* origin_addr, int origin_count, MPI_Datatype origin_datatype, 
        int target_rank, MPI_Aint target_disp, int target_count, 
        MPI_Datatype target_datatype, MPI_Op op, MPI_Win win, MPI_Request* request);
int MPI_Recv_init(void* buf, int count, MPI_Datatype datatype, int source,
        int tag, MPI_Comm comm, MPI_Request* request);
int MPI_Recv(void* buf, int count, MPI_Datatype datatype, int source,
        int tag, MPI_Comm comm, MPI_Status* status);
int MPI_Reduce(void* sendbuf, void* recvbuf, int count,
        MPI_Datatype datatype, MPI_Op op, int root, MPI_Comm comm);
int MPI_Ireduce(void* sendbuf, void* recvbuf, int count,
        MPI_Datatype datatype, MPI_Op op, int root, MPI_Comm comm, MPI_Request* request);
int MPI_Reduce_local(void* inbuf, void* inoutbuf, int count,
        MPI_Datatype datatype, MPI_Op op);
int MPI_Reduce_scatter(void* sendbuf, void* recvbuf, int* recvcounts,
        MPI_Datatype datatype, MPI_Op op, MPI_Comm comm);
int MPI_Ireduce_scatter(void* sendbuf, void* recvbuf, int* recvcounts,
        MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request* request);
int MPI_Reduce_scatter_block(void* sendbuf, void* recvbuf, int recvcount,
        MPI_Datatype datatype, MPI_Op op, MPI_Comm comm);
int MPI_Ireduce_scatter_block(void* sendbuf, void* recvbuf, int recvcount,
        MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request* request);
int MPI_Register_datarep(char* datarep,
        MPI_Datarep_conversion_function* read_conversion_fn,
        MPI_Datarep_conversion_function* write_conversion_fn,
        MPI_Datarep_extent_function* dtype_file_extent_fn,
        void* extra_state);
MPI_Fint MPI_Request_c2f(MPI_Request request);
MPI_Request MPI_Request_f2c(MPI_Fint request);
int MPI_Request_free(MPI_Request* request);
int MPI_Request_get_status(MPI_Request request, int* flag,
        MPI_Status* status);
int MPI_Rget(void* origin_addr, int origin_count, MPI_Datatype origin_datatype, 
        int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype,
        MPI_Win win, MPI_Request* request);
int MPI_Rget_accumulate(void* origin_addr, int origin_count, MPI_Datatype origin_datatype,
        void* result_addr, int result_count, MPI_Datatype result_datatype,
        int target_rank, MPI_Aint target_disp, int target_count, 
        MPI_Datatype target_datatype, MPI_Op op,
        MPI_Win win, MPI_Request* request);
int MPI_Rput(void* origin_addr, int origin_count, MPI_Datatype origin_datatype,
        int target_rank, MPI_Aint target_disp, int target_cout, 
        MPI_Datatype target_datatype, MPI_Win win, MPI_Request* request);
int MPI_Rsend(void* ibuf, int count, MPI_Datatype datatype, int dest,
        int tag, MPI_Comm comm);
int MPI_Rsend_init(void* buf, int count, MPI_Datatype datatype,
        int dest, int tag, MPI_Comm comm,
        MPI_Request* request);
int MPI_Scan(void* sendbuf, void* recvbuf, int count,
        MPI_Datatype datatype, MPI_Op op, MPI_Comm comm);
int MPI_Iscan(void* sendbuf, void* recvbuf, int count,
        MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request* request);
int MPI_Scatter(void* sendbuf, int sendcount, MPI_Datatype sendtype,
        void* recvbuf, int recvcount, MPI_Datatype recvtype,
        int root, MPI_Comm comm);
int MPI_Iscatter(void* sendbuf, int sendcount, MPI_Datatype sendtype,
        void* recvbuf, int recvcount, MPI_Datatype recvtype,
        int root, MPI_Comm comm, MPI_Request* request);
int MPI_Scatterv(void* sendbuf, int* sendcounts, int* displs,
        MPI_Datatype sendtype, void* recvbuf, int recvcount,
        MPI_Datatype recvtype, int root, MPI_Comm comm);
int MPI_Iscatterv(void* sendbuf, int* sendcounts, int* displs,
        MPI_Datatype sendtype, void* recvbuf, int recvcount,
        MPI_Datatype recvtype, int root, MPI_Comm comm, MPI_Request* request);
int MPI_Send_init(void* buf, int count, MPI_Datatype datatype,
        int dest, int tag, MPI_Comm comm,
        MPI_Request* request);
int MPI_Send(void* buf, int count, MPI_Datatype datatype, int dest,
        int tag, MPI_Comm comm);
int MPI_Sendrecv(void* sendbuf, int sendcount, MPI_Datatype sendtype,
        int dest, int sendtag, void* recvbuf, int recvcount,
        MPI_Datatype recvtype, int source, int recvtag,
        MPI_Comm comm,  MPI_Status* status);
int MPI_Sendrecv_replace(void*  buf, int count, MPI_Datatype datatype,
        int dest, int sendtag, int source, int recvtag,
        MPI_Comm comm, MPI_Status* status);
int MPI_Ssend_init(void* buf, int count, MPI_Datatype datatype,
        int dest, int tag, MPI_Comm comm,
        MPI_Request* request);
int MPI_Ssend(void* buf, int count, MPI_Datatype datatype, int dest,
        int tag, MPI_Comm comm);
int MPI_Start(MPI_Request* request);
int MPI_Startall(int count, MPI_Request* array_of_requests);
int MPI_Status_c2f(MPI_Status* c_status, MPI_Fint* f_status);
int MPI_Status_f2c(MPI_Fint* f_status, MPI_Status* c_status);
int MPI_Status_set_cancelled(MPI_Status* status, int flag);
int MPI_Status_set_elements(MPI_Status* status, MPI_Datatype datatype,
        int count);
static if(OMPI_MAJOR_VERSION == 1 && OMPI_MINOR_VERSION >= 8)
    int MPI_Status_set_elements_x(MPI_Status* status, MPI_Datatype datatype,
        MPI_Count count);
int MPI_Testall(int count, MPI_Request* array_of_requests, int* flag,
        MPI_Status* array_of_statuses);
int MPI_Testany(int count, MPI_Request* array_of_requests, int* index,
        int* flag, MPI_Status* status);
int MPI_Test(MPI_Request* request, int* flag, MPI_Status* status);
int MPI_Test_cancelled(MPI_Status* status, int* flag);
int MPI_Testsome(int incount, MPI_Request* array_of_requests,
        int* outcount, int* array_of_indices,
        MPI_Status* array_of_statuses);
int MPI_Topo_test(MPI_Comm comm, int* status);
MPI_Fint MPI_Type_c2f(MPI_Datatype datatype);
int MPI_Type_commit(MPI_Datatype* type);
int MPI_Type_contiguous(int count, MPI_Datatype oldtype,
        MPI_Datatype* newtype);
int MPI_Type_create_darray(int size, int rank, int ndims,
        int* gsize_array, int* distrib_array,
        int* darg_array, int* psize_array,
        int order, MPI_Datatype oldtype,
        MPI_Datatype* newtype);
int MPI_Type_create_f90_complex(int p, int r, MPI_Datatype* newtype);
int MPI_Type_create_f90_integer(int r, MPI_Datatype* newtype);
int MPI_Type_create_f90_real(int p, int r, MPI_Datatype* newtype);
int MPI_Type_create_hindexed_block(int count, int blocklength,
        MPI_Aint* array_of_displacements,
        MPI_Datatype oldtype,
        MPI_Datatype* newtype);
int MPI_Type_create_hindexed(int count, int* array_of_blocklengths,
        MPI_Aint* array_of_displacements,
        MPI_Datatype oldtype,
        MPI_Datatype* newtype);
int MPI_Type_create_hvector(int count, int blocklength, MPI_Aint stride,
        MPI_Datatype oldtype,
        MPI_Datatype* newtype);
int MPI_Type_create_keyval(MPI_Type_copy_attr_function* type_copy_attr_fn,
        MPI_Type_delete_attr_function* type_delete_attr_fn,
        int* type_keyval, void* extra_state);
int MPI_Type_create_indexed_block(int count, int blocklength,
        int* array_of_displacements,
        MPI_Datatype oldtype,
        MPI_Datatype* newtype);
int MPI_Type_create_struct(int count, int* array_of_block_lengths,
        MPI_Aint* array_of_displacements,
        MPI_Datatype* array_of_types,
        MPI_Datatype* newtype);
int MPI_Type_create_subarray(int ndims, int* size_array, int* subsize_array,
        int* start_array, int order,
        MPI_Datatype oldtype, MPI_Datatype* newtype);
int MPI_Type_create_resized(MPI_Datatype oldtype, MPI_Aint lb,
        MPI_Aint extent, MPI_Datatype* newtype);
int MPI_Type_delete_attr(MPI_Datatype type, int type_keyval);
int MPI_Type_dup(MPI_Datatype type, MPI_Datatype* newtype);
int MPI_Type_free(MPI_Datatype* type);
int MPI_Type_free_keyval(int* type_keyval);
MPI_Datatype MPI_Type_f2c(MPI_Fint datatype);
int MPI_Type_get_attr(MPI_Datatype type, int type_keyval,
        void* attribute_val, int* flag);
int MPI_Type_get_contents(MPI_Datatype mtype, int max_integers,
        int max_addresses, int max_datatypes,
        int* array_of_integers,
        MPI_Aint* array_of_addresses,
        MPI_Datatype* array_of_datatypes);
int MPI_Type_get_envelope(MPI_Datatype type, int* num_integers,
        int* num_addresses, int* num_datatypes,
        int* combiner);
int MPI_Type_get_extent(MPI_Datatype type, MPI_Aint* lb,
        MPI_Aint* extent);
static if(OMPI_MAJOR_VERSION == 1 && OMPI_MINOR_VERSION >= 8)
    int MPI_Type_get_extent_x(MPI_Datatype type, MPI_Count* lb,
        MPI_Count* extent);
int MPI_Type_get_name(MPI_Datatype type, char* type_name,
        int* resultlen);
int MPI_Type_get_true_extent(MPI_Datatype datatype, MPI_Aint* true_lb,
        MPI_Aint* true_extent);
static if(OMPI_MAJOR_VERSION == 1 && OMPI_MINOR_VERSION >= 8)
    int MPI_Type_get_true_extent_x(MPI_Datatype datatype, MPI_Count* true_lb,
        MPI_Count* true_extent);
int MPI_Type_indexed(int count, int* array_of_blocklengths,
        int* array_of_displacements,
        MPI_Datatype oldtype, MPI_Datatype* newtype);
int MPI_Type_match_size(int typeclass, int size, MPI_Datatype* type);
int MPI_Type_set_attr(MPI_Datatype type, int type_keyval,
        void* attr_val);
int MPI_Type_set_name(MPI_Datatype type, char* type_name);
int MPI_Type_size(MPI_Datatype type, int* size);
static if(OMPI_MAJOR_VERSION == 1 && OMPI_MINOR_VERSION >= 8)
    int MPI_Type_size_x(MPI_Datatype type, MPI_Count* size);
int MPI_Type_vector(int count, int blocklength, int stride,
        MPI_Datatype oldtype, MPI_Datatype* newtype);
int MPI_Unpack(void* inbuf, int insize, int* position,
        void* outbuf, int outcount, MPI_Datatype datatype,
        MPI_Comm comm);
int MPI_Unpublish_name(char* service_name, MPI_Info info, char* port_name);
int MPI_Unpack_external (char* datarep, void* inbuf, MPI_Aint insize,
        MPI_Aint* position, void* outbuf, int outcount,
        MPI_Datatype datatype);
int MPI_Waitall(int count, MPI_Request* array_of_requests,
        MPI_Status* array_of_statuses);
int MPI_Waitany(int count, MPI_Request* array_of_requests,
        int* index, MPI_Status* status);
int MPI_Wait(MPI_Request* request, MPI_Status* status);
int MPI_Waitsome(int incount, MPI_Request* array_of_requests,
        int* outcount, int* array_of_indices,
        MPI_Status* array_of_statuses);
int MPI_Win_allocate(MPI_Aint size, int disp_unit, MPI_Info info,
        MPI_Comm comm, void* baseptr, MPI_Win* win);
int MPI_Win_allocate_shared(MPI_Aint size, int disp_unit, MPI_Info info,
        MPI_Comm comm, void* baseptr, MPI_Win* win);
int MPI_Win_attach(MPI_Win win, void* base, MPI_Aint size);
MPI_Fint MPI_Win_c2f(MPI_Win win);
int MPI_Win_call_errhandler(MPI_Win win, int errorcode);
int MPI_Win_complete(MPI_Win win);
int MPI_Win_create(void* base, MPI_Aint size, int disp_unit,
        MPI_Info info, MPI_Comm comm, MPI_Win* win);
int MPI_Win_create_dynamic(MPI_Info info, MPI_Comm comm, MPI_Win* win);
int MPI_Win_create_errhandler(MPI_Win_errhandler_function* function_,
        MPI_Errhandler* errhandler);
int MPI_Win_create_keyval(MPI_Win_copy_attr_function* win_copy_attr_fn,
        MPI_Win_delete_attr_function* win_delete_attr_fn,
        int* win_keyval, void* extra_state);
int MPI_Win_delete_attr(MPI_Win win, int win_keyval);
int MPI_Win_detach(MPI_Win win, void* base);
MPI_Win MPI_Win_f2c(MPI_Fint win);
int MPI_Win_fence(int assert_, MPI_Win win);
int MPI_Win_flush(int rank, MPI_Win win);
int MPI_Win_flush_all(MPI_Win win);
int MPI_Win_flush_local(int rank, MPI_Win win);
int MPI_Win_flush_local_all(MPI_Win win);
int MPI_Win_free(MPI_Win* win);
int MPI_Win_free_keyval(int* win_keyval);
int MPI_Win_get_attr(MPI_Win win, int win_keyval,
        void* attribute_val, int* flag);
int MPI_Win_get_errhandler(MPI_Win win, MPI_Errhandler* errhandler);
int MPI_Win_get_group(MPI_Win win, MPI_Group* group);
int MPI_Win_get_info(MPI_Win win, MPI_Info* info_used);
int MPI_Win_get_name(MPI_Win win, char* win_name, int* resultlen);
int MPI_Win_lock(int lock_type, int rank, int assert_, MPI_Win win);
int MPI_Win_lock_all(int assert_, MPI_Win win);
int MPI_Win_post(MPI_Group group, int assert_, MPI_Win win);
int MPI_Win_set_attr(MPI_Win win, int win_keyval, void* attribute_val);
int MPI_Win_set_errhandler(MPI_Win win, MPI_Errhandler errhandler);
int MPI_Win_set_info(MPI_Win win, MPI_Info info);
int MPI_Win_set_name(MPI_Win win, char* win_name);
int MPI_Win_shared_query(MPI_Win win, int rank, MPI_Aint* size, int* disp_unit, void* baseptr);
int MPI_Win_start(MPI_Group group, int assert_, MPI_Win win);
int MPI_Win_sync(MPI_Win win);
int MPI_Win_test(MPI_Win win, int* flag);
int MPI_Win_unlock(int rank, MPI_Win win);
int MPI_Win_unlock_all(MPI_Win win);
int MPI_Win_wait(MPI_Win win);
double MPI_Wtick();
double MPI_Wtime();

/*
 * Profiling MPI API
 */
int PMPI_Abort(MPI_Comm comm, int errorcode);
int PMPI_Accumulate(void* origin_addr, int origin_count, MPI_Datatype origin_datatype,
        int target_rank, MPI_Aint target_disp, int target_count,
        MPI_Datatype target_datatype, MPI_Op op, MPI_Win win);
int PMPI_Add_error_class(int* errorclass);
int PMPI_Add_error_code(int errorclass, int* errorcode);
int PMPI_Add_error_string(int errorcode, char* string);
int PMPI_Allgather(void* sendbuf, int sendcount, MPI_Datatype sendtype,
        void* recvbuf, int recvcount,
        MPI_Datatype recvtype, MPI_Comm comm);
int PMPI_Iallgather(void* sendbuf, int sendcount, MPI_Datatype sendtype,
        void* recvbuf, int recvcount,
        MPI_Datatype recvtype, MPI_Comm comm, MPI_Request* request);
int PMPI_Allgatherv(void* sendbuf, int sendcount, MPI_Datatype sendtype,
        void* recvbuf, int* recvcounts,
        int* displs, MPI_Datatype recvtype, MPI_Comm comm);
int PMPI_Iallgatherv(void* sendbuf, int sendcount, MPI_Datatype sendtype,
        void* recvbuf, int* recvcounts,
        int* displs, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request* request);
int PMPI_Alloc_mem(MPI_Aint size, MPI_Info info,
        void* baseptr);
int PMPI_Allreduce(void* sendbuf, void* recvbuf, int count,
        MPI_Datatype datatype, MPI_Op op, MPI_Comm comm);
int PMPI_Iallreduce(void* sendbuf, void* recvbuf, int count,
        MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request* request);
int PMPI_Alltoall(void* sendbuf, int sendcount, MPI_Datatype sendtype,
        void* recvbuf, int recvcount,
        MPI_Datatype recvtype, MPI_Comm comm);
int PMPI_Ialltoall(void* sendbuf, int sendcount, MPI_Datatype sendtype,
        void* recvbuf, int recvcount,
        MPI_Datatype recvtype, MPI_Comm comm, MPI_Request* request);
int PMPI_Alltoallv(void* sendbuf, int* sendcounts, int* sdispls,
        MPI_Datatype sendtype, void* recvbuf, int* recvcounts,
        int* rdispls, MPI_Datatype recvtype, MPI_Comm comm);
int PMPI_Ialltoallv(void* sendbuf, int* sendcounts, int* sdispls,
        MPI_Datatype sendtype, void* recvbuf, int* recvcounts,
        int* rdispls, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request* request);
int PMPI_Alltoallw(void* sendbuf, int* sendcounts, int* sdispls, MPI_Datatype* sendtypes,
        void* recvbuf, int* recvcounts, int* rdispls, MPI_Datatype* recvtypes,
        MPI_Comm comm);
int PMPI_Ialltoallw(void* sendbuf, int* sendcounts, int* sdispls, MPI_Datatype* sendtypes,
        void* recvbuf, int* recvcounts, int* rdispls, MPI_Datatype* recvtypes,
        MPI_Comm comm, MPI_Request* request);
int PMPI_Dist_graph_create(MPI_Comm comm_old, int n, int* nodes,
        int* degrees, int* targets,
        int* weights, MPI_Info info,
        int reorder, MPI_Comm*  newcomm);
int PMPI_Dist_graph_create_adjacent(MPI_Comm comm_old,
        int indegree, int* sources,
        int* sourceweights,
        int outdegree,
        int* destinations,
        int* destweights,
        MPI_Info info, int reorder,
        MPI_Comm* comm_dist_graph);
int PMPI_Dist_graph_neighbors(MPI_Comm comm, int maxindegree,
        int* sources, int* sourceweights,
        int maxoutdegree,
        int* destinations,
        int* destweights);
int PMPI_Dist_graph_neighbors_count(MPI_Comm comm,
        int* inneighbors,
        int* outneighbors,
        int* weighted);
int PMPI_Barrier(MPI_Comm comm);
int PMPI_Ibarrier(MPI_Comm comm, MPI_Request* request);
int PMPI_Bcast(void* buffer, int count, MPI_Datatype datatype,
        int root, MPI_Comm comm);
int PMPI_Ibcast(void* buffer, int count, MPI_Datatype datatype,
        int root, MPI_Comm comm,
        MPI_Request* request);
int PMPI_Bsend(void* buf, int count, MPI_Datatype datatype,
        int dest, int tag, MPI_Comm comm);
int PMPI_Bsend_init(void* buf, int count, MPI_Datatype datatype,
        int dest, int tag, MPI_Comm comm, MPI_Request* request);
int PMPI_Buffer_attach(void* buffer, int size);
int PMPI_Buffer_detach(void* buffer, int* size);
int PMPI_Cancel(MPI_Request* request);
int PMPI_Cart_coords(MPI_Comm comm, int rank, int maxdims, int* coords);
int PMPI_Cart_create(MPI_Comm old_comm, int ndims, int* dims,
        int* periods, int reorder, MPI_Comm* comm_cart);
int PMPI_Cart_get(MPI_Comm comm, int maxdims, int* dims,
        int* periods, int* coords);
int PMPI_Cart_map(MPI_Comm comm, int ndims, int* dims,
        int* periods, int* newrank);
int PMPI_Cart_rank(MPI_Comm comm, int* coords, int* rank);
int PMPI_Cart_shift(MPI_Comm comm, int direction, int disp,
        int* rank_source, int* rank_dest);
int PMPI_Cart_sub(MPI_Comm comm, int* remain_dims, MPI_Comm* new_comm);
int PMPI_Cartdim_get(MPI_Comm comm, int* ndims);
int PMPI_Close_port(char* port_name);
int PMPI_Comm_accept(char* port_name, MPI_Info info, int root,
        MPI_Comm comm, MPI_Comm* newcomm);
MPI_Fint PMPI_Comm_c2f(MPI_Comm comm);
int PMPI_Comm_call_errhandler(MPI_Comm comm, int errorcode);
int PMPI_Comm_compare(MPI_Comm comm1, MPI_Comm comm2, int* result);
int PMPI_Comm_connect(char* port_name, MPI_Info info, int root,
        MPI_Comm comm, MPI_Comm* newcomm);
int PMPI_Comm_create_errhandler(MPI_Comm_errhandler_function* function_,
        MPI_Errhandler* errhandler);
int PMPI_Comm_create_keyval(MPI_Comm_copy_attr_function* comm_copy_attr_fn,
        MPI_Comm_delete_attr_function* comm_delete_attr_fn,
        int* comm_keyval, void* extra_state);
int PMPI_Comm_create_group(MPI_Comm comm, MPI_Group group, int tag, MPI_Comm* newcomm);
int PMPI_Comm_create(MPI_Comm comm, MPI_Group group, MPI_Comm* newcomm);
int PMPI_Comm_delete_attr(MPI_Comm comm, int comm_keyval);
int PMPI_Comm_disconnect(MPI_Comm* comm);
int PMPI_Comm_dup(MPI_Comm comm, MPI_Comm* newcomm);
int PMPI_Comm_idup(MPI_Comm comm, MPI_Comm* newcomm, MPI_Request* request);
int PMPI_Comm_dup_with_info(MPI_Comm comm, MPI_Info info, MPI_Comm* newcomm);
MPI_Comm PMPI_Comm_f2c(MPI_Fint comm);
int PMPI_Comm_free_keyval(int* comm_keyval);
int PMPI_Comm_free(MPI_Comm* comm);
int PMPI_Comm_get_attr(MPI_Comm comm, int comm_keyval,
        void* attribute_val, int* flag);
int PMPI_Comm_get_errhandler(MPI_Comm comm, MPI_Errhandler* erhandler);
int PMPI_Comm_get_info(MPI_Comm comm, MPI_Info* info_used);
int PMPI_Comm_get_name(MPI_Comm comm, char* comm_name, int* resultlen);
int PMPI_Comm_get_parent(MPI_Comm* parent);
int PMPI_Comm_group(MPI_Comm comm, MPI_Group* group);
int PMPI_Comm_join(int fd, MPI_Comm* intercomm);
int PMPI_Comm_rank(MPI_Comm comm, int* rank);
int PMPI_Comm_remote_group(MPI_Comm comm, MPI_Group* group);
int PMPI_Comm_remote_size(MPI_Comm comm, int* size);
int PMPI_Comm_set_attr(MPI_Comm comm, int comm_keyval, void* attribute_val);
int PMPI_Comm_set_errhandler(MPI_Comm comm, MPI_Errhandler errhandler);
int PMPI_Comm_set_info(MPI_Comm comm, MPI_Info info);
int PMPI_Comm_set_name(MPI_Comm comm, char* comm_name);
int PMPI_Comm_size(MPI_Comm comm, int* size);
int PMPI_Comm_spawn(char* command, char** argv, int maxprocs, MPI_Info info,
        int root, MPI_Comm comm, MPI_Comm* intercomm,
        int* array_of_errcodes);
int PMPI_Comm_spawn_multiple(int count, char** array_of_commands, char*** array_of_argv,
        int* array_of_maxprocs, MPI_Info* array_of_info,
        int root, MPI_Comm comm, MPI_Comm* intercomm,
        int* array_of_errcodes);
int PMPI_Comm_split(MPI_Comm comm, int color, int key, MPI_Comm* newcomm);
int PMPI_Comm_split_type(MPI_Comm comm, int split_type, int key, MPI_Info info, MPI_Comm* newcomm);
int PMPI_Comm_test_inter(MPI_Comm comm, int* flag);
int PMPI_Compare_and_swap(void* origin_addr, void* compare_addr,
        void* result_addr, MPI_Datatype datatype, int target_rank,
        MPI_Aint target_disp, MPI_Win win);
int PMPI_Dims_create(int nnodes, int ndims, int* dims);
MPI_Fint PMPI_Errhandler_c2f(MPI_Errhandler errhandler);
MPI_Errhandler PMPI_Errhandler_f2c(MPI_Fint errhandler);
int PMPI_Errhandler_free(MPI_Errhandler* errhandler);
int PMPI_Error_class(int errorcode, int* errorclass);
int PMPI_Error_string(int errorcode, char* string, int* resultlen);
int PMPI_Exscan(void* sendbuf, void* recvbuf, int count,
        MPI_Datatype datatype, MPI_Op op, MPI_Comm comm);
int PMPI_Fetch_and_op(void* origin_addr, void* result_addr, MPI_Datatype datatype,
        int target_rank, MPI_Aint target_disp, MPI_Op op, MPI_Win win);
int PMPI_Iexscan(void* sendbuf, void* recvbuf, int count,
        MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request* request);
static if (OMPI_PROVIDE_MPI_FILE_INTERFACE)
{
    MPI_Fint PMPI_File_c2f(MPI_File file);
    MPI_File PMPI_File_f2c(MPI_Fint file);
    int PMPI_File_call_errhandler(MPI_File fh, int errorcode);
    int PMPI_File_create_errhandler(MPI_File_errhandler_function* function_,
            MPI_Errhandler* errhandler);
    int PMPI_File_set_errhandler( MPI_File file, MPI_Errhandler errhandler);
    int PMPI_File_get_errhandler( MPI_File file, MPI_Errhandler* errhandler);
    int PMPI_File_open(MPI_Comm comm, char* filename, int amode,
            MPI_Info info, MPI_File* fh);
    int PMPI_File_close(MPI_File* fh);
    int PMPI_File_delete(char* filename, MPI_Info info);
    int PMPI_File_set_size(MPI_File fh, MPI_Offset size);
    int PMPI_File_preallocate(MPI_File fh, MPI_Offset size);
    int PMPI_File_get_size(MPI_File fh, MPI_Offset* size);
    int PMPI_File_get_group(MPI_File fh, MPI_Group* group);
    int PMPI_File_get_amode(MPI_File fh, int* amode);
    int PMPI_File_set_info(MPI_File fh, MPI_Info info);
    int PMPI_File_get_info(MPI_File fh, MPI_Info* info_used);
    int PMPI_File_set_view(MPI_File fh, MPI_Offset disp, MPI_Datatype etype,
            MPI_Datatype filetype, char* datarep, MPI_Info info);
    int PMPI_File_get_view(MPI_File fh, MPI_Offset* disp,
            MPI_Datatype* etype,
            MPI_Datatype* filetype, char* datarep);
    int PMPI_File_read_at(MPI_File fh, MPI_Offset offset, void* buf,
            int count, MPI_Datatype datatype, MPI_Status* status);
    int PMPI_File_read_at_all(MPI_File fh, MPI_Offset offset, void* buf,
            int count, MPI_Datatype datatype, MPI_Status* status);
    int PMPI_File_write_at(MPI_File fh, MPI_Offset offset, void* buf,
            int count, MPI_Datatype datatype, MPI_Status* status);
    int PMPI_File_write_at_all(MPI_File fh, MPI_Offset offset, void* buf,
            int count, MPI_Datatype datatype, MPI_Status* status);
    int PMPI_File_iread_at(MPI_File fh, MPI_Offset offset, void* buf,
            int count, MPI_Datatype datatype, MPI_Request* request);
    int PMPI_File_iwrite_at(MPI_File fh, MPI_Offset offset, void* buf,
            int count, MPI_Datatype datatype, MPI_Request* request);
    int PMPI_File_read(MPI_File fh, void* buf, int count,
            MPI_Datatype datatype, MPI_Status* status);
    int PMPI_File_read_all(MPI_File fh, void* buf, int count,
            MPI_Datatype datatype, MPI_Status* status);
    int PMPI_File_write(MPI_File fh, void* buf, int count,
            MPI_Datatype datatype, MPI_Status* status);
    int PMPI_File_write_all(MPI_File fh, void* buf, int count,
            MPI_Datatype datatype, MPI_Status* status);
    int PMPI_File_iread(MPI_File fh, void* buf, int count,
            MPI_Datatype datatype, MPI_Request* request);
    int PMPI_File_iwrite(MPI_File fh, void* buf, int count,
            MPI_Datatype datatype, MPI_Request* request);
    int PMPI_File_seek(MPI_File fh, MPI_Offset offset, int whence);
    int PMPI_File_get_position(MPI_File fh, MPI_Offset* offset);
    int PMPI_File_get_byte_offset(MPI_File fh, MPI_Offset offset,
            MPI_Offset* disp);
    int PMPI_File_read_shared(MPI_File fh, void* buf, int count,
            MPI_Datatype datatype, MPI_Status* status);
    int PMPI_File_write_shared(MPI_File fh, void* buf, int count,
            MPI_Datatype datatype, MPI_Status* status);
    int PMPI_File_iread_shared(MPI_File fh, void* buf, int count,
            MPI_Datatype datatype, MPI_Request* request);
    int PMPI_File_iwrite_shared(MPI_File fh, void* buf, int count,
            MPI_Datatype datatype, MPI_Request* request);
    int PMPI_File_read_ordered(MPI_File fh, void* buf, int count,
            MPI_Datatype datatype, MPI_Status* status);
    int PMPI_File_write_ordered(MPI_File fh, void* buf, int count,
            MPI_Datatype datatype, MPI_Status* status);
    int PMPI_File_seek_shared(MPI_File fh, MPI_Offset offset, int whence);
    int PMPI_File_get_position_shared(MPI_File fh, MPI_Offset* offset);
    int PMPI_File_read_at_all_begin(MPI_File fh, MPI_Offset offset, void* buf,
            int count, MPI_Datatype datatype);
    int PMPI_File_read_at_all_end(MPI_File fh, void* buf, MPI_Status* status);
    int PMPI_File_write_at_all_begin(MPI_File fh, MPI_Offset offset, void* buf,
            int count, MPI_Datatype datatype);
    int PMPI_File_write_at_all_end(MPI_File fh, void* buf, MPI_Status* status);
    int PMPI_File_read_all_begin(MPI_File fh, void* buf, int count,
            MPI_Datatype datatype);
    int PMPI_File_read_all_end(MPI_File fh, void* buf, MPI_Status* status);
    int PMPI_File_write_all_begin(MPI_File fh, void* buf, int count,
            MPI_Datatype datatype);
    int PMPI_File_write_all_end(MPI_File fh, void* buf, MPI_Status* status);
    int PMPI_File_read_ordered_begin(MPI_File fh, void* buf, int count,
            MPI_Datatype datatype);
    int PMPI_File_read_ordered_end(MPI_File fh, void* buf, MPI_Status* status);
    int PMPI_File_write_ordered_begin(MPI_File fh, void* buf, int count,
            MPI_Datatype datatype);
    int PMPI_File_write_ordered_end(MPI_File fh, void* buf, MPI_Status* status);
    int PMPI_File_get_type_extent(MPI_File fh, MPI_Datatype datatype,
            MPI_Aint* extent);
    int PMPI_File_set_atomicity(MPI_File fh, int flag);
    int PMPI_File_get_atomicity(MPI_File fh, int* flag);
    int PMPI_File_sync(MPI_File fh);
}/* #if OMPI_PROVIDE_MPI_FILE_INTERFACE */
int PMPI_Finalize();
int PMPI_Finalized(int* flag);
int PMPI_Free_mem(void* base);
int PMPI_Gather(void* sendbuf, int sendcount, MPI_Datatype sendtype,
        void* recvbuf, int recvcount, MPI_Datatype recvtype,
        int root, MPI_Comm comm);
int PMPI_Igather(void* sendbuf, int sendcount, MPI_Datatype sendtype,
        void* recvbuf, int recvcount, MPI_Datatype recvtype,
        int root, MPI_Comm comm, MPI_Request* request);
int PMPI_Gatherv(void* sendbuf, int sendcount, MPI_Datatype sendtype,
        void* recvbuf, int* recvcounts, int* displs,
        MPI_Datatype recvtype, int root, MPI_Comm comm);
int PMPI_Igatherv(void* sendbuf, int sendcount, MPI_Datatype sendtype,
        void* recvbuf, int* recvcounts, int* displs,
        MPI_Datatype recvtype, int root, MPI_Comm comm, MPI_Request* request);
int PMPI_Get_address(void* location, MPI_Aint* address);
int PMPI_Get_count(MPI_Status* status, MPI_Datatype datatype, int* count);
int PMPI_Get_elements(MPI_Status* status, MPI_Datatype datatype,
        int* count);
static if(OMPI_MAJOR_VERSION == 1 && OMPI_MINOR_VERSION >= 8)
    int PMPI_Get_elements_x(MPI_Status* status, MPI_Datatype datatype,
        MPI_Count* count);
int PMPI_Get(void* origin_addr, int origin_count,
        MPI_Datatype origin_datatype, int target_rank,
        MPI_Aint target_disp, int target_count,
        MPI_Datatype target_datatype, MPI_Win win);
int PMPI_Get_accumulate(void* origin_addr, int origin_count, MPI_Datatype origin_datatype,
        void* result_addr, int result_count, MPI_Datatype result_datatype,
        int target_rank, MPI_Aint target_disp, int target_count,
        MPI_Datatype target_datatype, MPI_Op op, MPI_Win win);
int PMPI_Get_library_version(char* version_, int* resultlen);
int PMPI_Get_processor_name(char* name, int* resultlen);
int PMPI_Get_version(int* version_, int* subversion);
int PMPI_Graph_create(MPI_Comm comm_old, int nnodes, int* index,
        int* edges, int reorder, MPI_Comm* comm_graph);
int PMPI_Graph_get(MPI_Comm comm, int maxindex, int maxedges,
        int* index, int* edges);
int PMPI_Graph_map(MPI_Comm comm, int nnodes, int* index, int* edges,
        int* newrank);
int PMPI_Graph_neighbors_count(MPI_Comm comm, int rank, int* nneighbors);
int PMPI_Graph_neighbors(MPI_Comm comm, int rank, int maxneighbors,
        int* neighbors);
int PMPI_Graphdims_get(MPI_Comm comm, int* nnodes, int* nedges);
int PMPI_Grequest_complete(MPI_Request request);
int PMPI_Grequest_start(MPI_Grequest_query_function* query_fn,
        MPI_Grequest_free_function* free_fn,
        MPI_Grequest_cancel_function* cancel_fn,
        void* extra_state, MPI_Request* request);
MPI_Fint PMPI_Group_c2f(MPI_Group group);
int PMPI_Group_compare(MPI_Group group1, MPI_Group group2, int* result);
int PMPI_Group_difference(MPI_Group group1, MPI_Group group2,
        MPI_Group* newgroup);
int PMPI_Group_excl(MPI_Group group, int n, int* ranks,
        MPI_Group* newgroup);
MPI_Group PMPI_Group_f2c(MPI_Fint group);
int PMPI_Group_free(MPI_Group* group);
int PMPI_Group_incl(MPI_Group group, int n, int* ranks,
        MPI_Group* newgroup);
int PMPI_Group_intersection(MPI_Group group1, MPI_Group group2,
        MPI_Group* newgroup);
int PMPI_Group_range_excl(MPI_Group group, int n, int[3]* ranges,
        MPI_Group* newgroup);
int PMPI_Group_range_incl(MPI_Group group, int n, int[3]* ranges,
        MPI_Group* newgroup);
int PMPI_Group_rank(MPI_Group group, int* rank);
int PMPI_Group_size(MPI_Group group, int* size);
int PMPI_Group_translate_ranks(MPI_Group group1, int n, int* ranks1,
        MPI_Group group2, int* ranks2);
int PMPI_Group_union(MPI_Group group1, MPI_Group group2,
        MPI_Group* newgroup);
int PMPI_Ibsend(void* buf, int count, MPI_Datatype datatype, int dest,
        int tag, MPI_Comm comm, MPI_Request* request);
static if(OMPI_MAJOR_VERSION == 1 && OMPI_MINOR_VERSION >= 8)
{
    int PMPI_Improbe(int source, int tag, MPI_Comm comm,
        int* flag, MPI_Message* message,
        MPI_Status* status);
    int PMPI_Imrecv(void* buf, int count, MPI_Datatype type,
        MPI_Message* message, MPI_Request* request);
}
MPI_Fint PMPI_Info_c2f(MPI_Info info);
int PMPI_Info_create(MPI_Info* info);
int PMPI_Info_delete(MPI_Info info, char* key);
int PMPI_Info_dup(MPI_Info info, MPI_Info* newinfo);
MPI_Info PMPI_Info_f2c(MPI_Fint info);
int PMPI_Info_free(MPI_Info* info);
int PMPI_Info_get(MPI_Info info, char* key, int valuelen,
        char* value, int* flag);
int PMPI_Info_get_nkeys(MPI_Info info, int* nkeys);
int PMPI_Info_get_nthkey(MPI_Info info, int n, char* key);
int PMPI_Info_get_valuelen(MPI_Info info, char* key, int* valuelen,
        int* flag);
int PMPI_Info_set(MPI_Info info, char* key, char* value);
int PMPI_Init(int* argc, char*** argv);
int PMPI_Initialized(int* flag);
int PMPI_Init_thread(int* argc, char*** argv, int required,
        int* provided);
int PMPI_Intercomm_create(MPI_Comm local_comm, int local_leader,
        MPI_Comm bridge_comm, int remote_leader,
        int tag, MPI_Comm* newintercomm);
int PMPI_Intercomm_merge(MPI_Comm intercomm, int high,
        MPI_Comm* newintercomm);
int PMPI_Iprobe(int source, int tag, MPI_Comm comm, int* flag,
        MPI_Status* status);
int PMPI_Irecv(void* buf, int count, MPI_Datatype datatype, int source,
        int tag, MPI_Comm comm, MPI_Request* request);
int PMPI_Irsend(void* buf, int count, MPI_Datatype datatype, int dest,
        int tag, MPI_Comm comm, MPI_Request* request);
int PMPI_Isend(void* buf, int count, MPI_Datatype datatype, int dest,
        int tag, MPI_Comm comm, MPI_Request* request);
int PMPI_Issend(void* buf, int count, MPI_Datatype datatype, int dest,
        int tag, MPI_Comm comm, MPI_Request* request);
int PMPI_Is_thread_main(int* flag);
int PMPI_Lookup_name(char* service_name, MPI_Info info, char* port_name);
static if(OMPI_MAJOR_VERSION == 1 && OMPI_MINOR_VERSION >= 8)
{
    MPI_Fint PMPI_Message_c2f(MPI_Message message);
    MPI_Message PMPI_Message_f2c(MPI_Fint message);
    int PMPI_Mprobe(int source, int tag, MPI_Comm comm,
        MPI_Message* message,
        MPI_Status* status);
    int PMPI_Mrecv(void* buf, int count, MPI_Datatype type,
        MPI_Message* message, MPI_Status* status);
}
int PMPI_Neighbor_allgather(void* sendbuf, int sendcount, MPI_Datatype sendtype,
        void* recvbuf, int recvcount, MPI_Datatype recvtype,
        MPI_Comm comm);
int PMPI_Ineighbor_allgather(void* sendbuf, int sendcount, MPI_Datatype sendtype,
        void* recvbuf, int recvcount, MPI_Datatype recvtype,
        MPI_Comm comm, MPI_Request* request);
int PMPI_Neighbor_allgatherv(void* sendbuf, int sendcount, MPI_Datatype sendtype,
        void* recvbuf, int* recvcounts, int* displs,
        MPI_Datatype recvtype, MPI_Comm comm);
int PMPI_Ineighbor_allgatherv(void* sendbuf, int sendcount, MPI_Datatype sendtype,
        void* recvbuf, int* recvcounts, int* displs,
        MPI_Datatype recvtype, MPI_Comm comm, MPI_Request* request);
int PMPI_Neighbor_alltoall(void* sendbuf, int sendcount, MPI_Datatype sendtype,
        void* recvbuf, int recvcount, MPI_Datatype recvtype,
        MPI_Comm comm);
int PMPI_Ineighbor_alltoall(void* sendbuf, int sendcount, MPI_Datatype sendtype,
        void* recvbuf, int recvcount, MPI_Datatype recvtype,
        MPI_Comm comm, MPI_Request* request);
int PMPI_Neighbor_alltoallv(void* sendbuf, int* sendcounts, int* sdispls,  MPI_Datatype sendtype,
        void* recvbuf, int* recvcounts, int* rdispls, MPI_Datatype recvtype,
        MPI_Comm comm);
int PMPI_Ineighbor_alltoallv(void* sendbuf, int* sendcounts, int* sdispls, MPI_Datatype sendtype,
        void* recvbuf, int* recvcounts, int* rdispls, MPI_Datatype recvtype,
        MPI_Comm comm, MPI_Request* request);
int PMPI_Neighbor_alltoallw(void* sendbuf, int* sendcounts, MPI_Aint* sdispls, MPI_Datatype* sendtypes,
        void* recvbuf, int* recvcounts, MPI_Aint* rdispls, MPI_Datatype* recvtypes,
        MPI_Comm comm);
int PMPI_Ineighbor_alltoallw(void* sendbuf, int* sendcounts, MPI_Aint* sdispls, MPI_Datatype* sendtypes,
        void* recvbuf, int* recvcounts, MPI_Aint* rdispls, MPI_Datatype* recvtypes,
        MPI_Comm comm, MPI_Request* request);
MPI_Fint PMPI_Op_c2f(MPI_Op op);
int PMPI_Op_commutative(MPI_Op op, int* commute);
int PMPI_Op_create(MPI_User_function* function_, int commute, MPI_Op* op);
int PMPI_Open_port(MPI_Info info, char* port_name);
MPI_Op PMPI_Op_f2c(MPI_Fint op);
int PMPI_Op_free(MPI_Op* op);
int PMPI_Pack_external(char* datarep, void* inbuf, int incount,
        MPI_Datatype datatype, void* outbuf,
        MPI_Aint outsize, MPI_Aint* position);
int PMPI_Pack_external_size(char* datarep, int incount,
        MPI_Datatype datatype, MPI_Aint* size);
int PMPI_Pack(void* inbuf, int incount, MPI_Datatype datatype,
        void* outbuf, int outsize, int* position, MPI_Comm comm);
int PMPI_Pack_size(int incount, MPI_Datatype datatype, MPI_Comm comm,
        int* size);
int PMPI_Pcontrol(int level, ...);
int PMPI_Probe(int source, int tag, MPI_Comm comm, MPI_Status* status);
int PMPI_Publish_name(char* service_name, MPI_Info info,
        char* port_name);
int PMPI_Put(void* origin_addr, int origin_count, MPI_Datatype origin_datatype,
        int target_rank, MPI_Aint target_disp, int target_count,
        MPI_Datatype target_datatype, MPI_Win win);
int PMPI_Query_thread(int* provided);
int PMPI_Raccumulate(void* origin_addr, int origin_count, MPI_Datatype origin_datatype, 
        int target_rank, MPI_Aint target_disp, int target_count, 
        MPI_Datatype target_datatype, MPI_Op op, MPI_Win win, MPI_Request* request);
int PMPI_Recv_init(void* buf, int count, MPI_Datatype datatype, int source,
        int tag, MPI_Comm comm, MPI_Request* request);
int PMPI_Recv(void* buf, int count, MPI_Datatype datatype, int source,
        int tag, MPI_Comm comm, MPI_Status* status);
int PMPI_Reduce(void* sendbuf, void* recvbuf, int count,
        MPI_Datatype datatype, MPI_Op op, int root, MPI_Comm comm);
int PMPI_Ireduce(void* sendbuf, void* recvbuf, int count,
        MPI_Datatype datatype, MPI_Op op, int root, MPI_Comm comm, MPI_Request* request);
int PMPI_Reduce_local(void* inbuf, void* inoutbuf, int count,
        MPI_Datatype datatype, MPI_Op);
int PMPI_Reduce_scatter(void* sendbuf, void* recvbuf, int* recvcounts,
        MPI_Datatype datatype, MPI_Op op, MPI_Comm comm);
int PMPI_Ireduce_scatter(void* sendbuf, void* recvbuf, int* recvcounts,
        MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request* request);
int PMPI_Reduce_scatter_block(void* sendbuf, void* recvbuf, int recvcount,
        MPI_Datatype datatype, MPI_Op op, MPI_Comm comm);
int PMPI_Ireduce_scatter_block(void* sendbuf, void* recvbuf, int recvcount,
        MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request* request);
int PMPI_Register_datarep(char* datarep,
        MPI_Datarep_conversion_function* read_conversion_fn,
        MPI_Datarep_conversion_function* write_conversion_fn,
        MPI_Datarep_extent_function* dtype_file_extent_fn,
        void* extra_state);
MPI_Fint PMPI_Request_c2f(MPI_Request request);
MPI_Request PMPI_Request_f2c(MPI_Fint request);
int PMPI_Request_free(MPI_Request* request);
int PMPI_Request_get_status(MPI_Request request, int* flag,
        MPI_Status* status);
int PMPI_Rget(void* origin_addr, int origin_count, MPI_Datatype origin_datatype, 
        int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype,
        MPI_Win win, MPI_Request* request);
int PMPI_Rget_accumulate(void* origin_addr, int origin_count, MPI_Datatype origin_datatype,
        void* result_addr, int result_count, MPI_Datatype result_datatype,
        int target_rank, MPI_Aint target_disp, int target_count, 
        MPI_Datatype target_datatype, MPI_Op op,
        MPI_Win win, MPI_Request* request);
int PMPI_Rput(void* origin_addr, int origin_count, MPI_Datatype origin_datatype,
        int target_rank, MPI_Aint target_disp, int target_cout, 
        MPI_Datatype target_datatype, MPI_Win win, MPI_Request* request);
int PMPI_Rsend(void* ibuf, int count, MPI_Datatype datatype, int dest,
        int tag, MPI_Comm comm);
int PMPI_Rsend_init(void* buf, int count, MPI_Datatype datatype,
        int dest, int tag, MPI_Comm comm,
        MPI_Request* request);
int PMPI_Scan(void* sendbuf, void* recvbuf, int count,
        MPI_Datatype datatype, MPI_Op op, MPI_Comm comm);
int PMPI_Iscan(void* sendbuf, void* recvbuf, int count,
        MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request* request);
int PMPI_Scatter(void* sendbuf, int sendcount, MPI_Datatype sendtype,
        void* recvbuf, int recvcount, MPI_Datatype recvtype,
        int root, MPI_Comm comm);
int PMPI_Iscatter(void* sendbuf, int sendcount, MPI_Datatype sendtype,
        void* recvbuf, int recvcount, MPI_Datatype recvtype,
        int root, MPI_Comm comm, MPI_Request* request);
int PMPI_Scatterv(void* sendbuf, int* sendcounts, int* displs,
        MPI_Datatype sendtype, void* recvbuf, int recvcount,
        MPI_Datatype recvtype, int root, MPI_Comm comm);
int PMPI_Iscatterv(void* sendbuf, int* sendcounts, int* displs,
        MPI_Datatype sendtype, void* recvbuf, int recvcount,
        MPI_Datatype recvtype, int root, MPI_Comm comm, MPI_Request* request);
int PMPI_Send_init(void* buf, int count, MPI_Datatype datatype,
        int dest, int tag, MPI_Comm comm,
        MPI_Request* request);
int PMPI_Send(void* buf, int count, MPI_Datatype datatype, int dest,
        int tag, MPI_Comm comm);
int PMPI_Sendrecv(void* sendbuf, int sendcount, MPI_Datatype sendtype,
        int dest, int sendtag, void* recvbuf, int recvcount,
        MPI_Datatype recvtype, int source, int recvtag,
        MPI_Comm comm,  MPI_Status* status);
int PMPI_Sendrecv_replace(void*  buf, int count, MPI_Datatype datatype,
        int dest, int sendtag, int source, int recvtag,
        MPI_Comm comm, MPI_Status* status);
int PMPI_Ssend_init(void* buf, int count, MPI_Datatype datatype,
        int dest, int tag, MPI_Comm comm,
        MPI_Request* request);
int PMPI_Ssend(void* buf, int count, MPI_Datatype datatype, int dest,
        int tag, MPI_Comm comm);
int PMPI_Start(MPI_Request* request);
int PMPI_Startall(int count, MPI_Request* array_of_requests);
int PMPI_Status_c2f(MPI_Status* c_status, MPI_Fint* f_status);
int PMPI_Status_f2c(MPI_Fint* f_status, MPI_Status* c_status);
int PMPI_Status_set_cancelled(MPI_Status* status, int flag);
int PMPI_Status_set_elements(MPI_Status* status, MPI_Datatype datatype,
        int count);
static if(OMPI_MAJOR_VERSION == 1 && OMPI_MINOR_VERSION >= 8)
    int PMPI_Status_set_elements_x(MPI_Status* status, MPI_Datatype datatype,
        MPI_Count count);
int PMPI_Testall(int count, MPI_Request* array_of_requests, int* flag,
        MPI_Status* array_of_statuses);
int PMPI_Testany(int count, MPI_Request* array_of_requests, int* index, int* flag, MPI_Status* status);
int PMPI_Test(MPI_Request* request, int* flag, MPI_Status* status);
int PMPI_Test_cancelled(MPI_Status* status, int* flag);
int PMPI_Testsome(int incount, MPI_Request* array_of_requests,
        int* outcount, int* array_of_indices,
        MPI_Status* array_of_statuses);
int PMPI_Topo_test(MPI_Comm comm, int* status);
MPI_Fint PMPI_Type_c2f(MPI_Datatype datatype);
int PMPI_Type_commit(MPI_Datatype* type);
int PMPI_Type_contiguous(int count, MPI_Datatype oldtype,
        MPI_Datatype* newtype);
int PMPI_Type_create_darray(int size, int rank, int ndims,
        int* gsize_array, int* distrib_array,
        int* darg_array, int* psize_array,
        int order, MPI_Datatype oldtype,
        MPI_Datatype* newtype);
int PMPI_Type_create_f90_complex(int p, int r, MPI_Datatype* newtype);
int PMPI_Type_create_f90_integer(int r, MPI_Datatype* newtype);
int PMPI_Type_create_f90_real(int p, int r, MPI_Datatype* newtype);
int PMPI_Type_create_hindexed(int count, int* array_of_blocklengths,
        MPI_Aint* array_of_displacements,
        MPI_Datatype oldtype,
        MPI_Datatype* newtype);
int PMPI_Type_create_hvector(int count, int blocklength, MPI_Aint stride,
        MPI_Datatype oldtype,
        MPI_Datatype* newtype);
int PMPI_Type_create_keyval(MPI_Type_copy_attr_function* type_copy_attr_fn,
        MPI_Type_delete_attr_function* type_delete_attr_fn,
        int* type_keyval, void* extra_state);
int PMPI_Type_create_hindexed_block(int count, int blocklength,
        MPI_Aint* array_of_displacements,
        MPI_Datatype oldtype,
        MPI_Datatype* newtype);
int PMPI_Type_create_indexed_block(int count, int blocklength,
        int* array_of_displacements,
        MPI_Datatype oldtype,
        MPI_Datatype* newtype);
int PMPI_Type_create_struct(int count, int* array_of_block_lengths,
        MPI_Aint* array_of_displacements,
        MPI_Datatype* array_of_types,
        MPI_Datatype* newtype);
int PMPI_Type_create_subarray(int ndims, int* size_array, int* subsize_array,
        int* start_array, int order,
        MPI_Datatype oldtype, MPI_Datatype* newtype);
int PMPI_Type_create_resized(MPI_Datatype oldtype, MPI_Aint lb,
        MPI_Aint extent, MPI_Datatype* newtype);
int PMPI_Type_delete_attr(MPI_Datatype type, int type_keyval);
int PMPI_Type_dup(MPI_Datatype type, MPI_Datatype* newtype);
int PMPI_Type_free(MPI_Datatype* type);
int PMPI_Type_free_keyval(int* type_keyval);
MPI_Datatype PMPI_Type_f2c(MPI_Fint datatype);
int PMPI_Type_get_attr(MPI_Datatype type, int type_keyval,
        void* attribute_val, int* flag);
int PMPI_Type_get_contents(MPI_Datatype mtype, int max_integers,
        int max_addresses, int max_datatypes,
        int* array_of_integers,
        MPI_Aint* array_of_addresses,
        MPI_Datatype* array_of_datatypes);
int PMPI_Type_get_envelope(MPI_Datatype type, int* num_integers,
        int* num_addresses, int* num_datatypes,
        int* combiner);
int PMPI_Type_get_extent(MPI_Datatype type, MPI_Aint* lb,
        MPI_Aint* extent);
static if(OMPI_MAJOR_VERSION == 1 && OMPI_MINOR_VERSION >= 8)
    int PMPI_Type_get_extent_x(MPI_Datatype type, MPI_Count* lb,
        MPI_Count* extent);
int PMPI_Type_get_name(MPI_Datatype type, char* type_name,
        int* resultlen);
int PMPI_Type_get_true_extent(MPI_Datatype datatype, MPI_Aint* true_lb,
        MPI_Aint* true_extent);
static if(OMPI_MAJOR_VERSION == 1 && OMPI_MINOR_VERSION >= 8)
    int PMPI_Type_get_true_extent_x(MPI_Datatype datatype, MPI_Count* true_lb,
        MPI_Count* true_extent);
int PMPI_Type_indexed(int count, int* array_of_blocklengths,
        int* array_of_displacements,
        MPI_Datatype oldtype, MPI_Datatype* newtype);
int PMPI_Type_match_size(int typeclass, int size, MPI_Datatype* type);
int PMPI_Type_set_attr(MPI_Datatype type, int type_keyval,
        void* attr_val);
int PMPI_Type_set_name(MPI_Datatype type, char* type_name);
int PMPI_Type_size(MPI_Datatype type, int* size);
static if(OMPI_MAJOR_VERSION == 1 && OMPI_MINOR_VERSION >= 8)
    int PMPI_Type_size_x(MPI_Datatype type, MPI_Count* size);
int PMPI_Type_vector(int count, int blocklength, int stride,
        MPI_Datatype oldtype, MPI_Datatype* newtype);
int PMPI_Unpack(void* inbuf, int insize, int* position,
        void* outbuf, int outcount, MPI_Datatype datatype,
        MPI_Comm comm);
int PMPI_Unpublish_name(char* service_name, MPI_Info info,
        char* port_name);
int PMPI_Unpack_external (char* datarep, void* inbuf, MPI_Aint insize,
        MPI_Aint* position, void* outbuf, int outcount,
        MPI_Datatype datatype);
int PMPI_Waitall(int count, MPI_Request* array_of_requests,
        MPI_Status* array_of_statuses);
int PMPI_Waitany(int count, MPI_Request* array_of_requests,
        int* index, MPI_Status* status);
int PMPI_Wait(MPI_Request* request, MPI_Status* status);
int PMPI_Waitsome(int incount, MPI_Request* array_of_requests,
        int* outcount, int* array_of_indices,
        MPI_Status* array_of_statuses);
int PMPI_Win_allocate(MPI_Aint size, int disp_unit, MPI_Info info,
        MPI_Comm comm, void* baseptr, MPI_Win* win);
int PMPI_Win_allocate_shared(MPI_Aint size, int disp_unit, MPI_Info info,
        MPI_Comm comm, void* baseptr, MPI_Win* win);
int PMPI_Win_attach(MPI_Win win, void* base, MPI_Aint size);
MPI_Fint PMPI_Win_c2f(MPI_Win win);
int PMPI_Win_call_errhandler(MPI_Win win, int errorcode);
int PMPI_Win_complete(MPI_Win win);
int PMPI_Win_create(void* base, MPI_Aint size, int disp_unit,
        MPI_Info info, MPI_Comm comm, MPI_Win* win);
int PMPI_Win_create_dynamic(MPI_Info info, MPI_Comm comm, MPI_Win* win);
int PMPI_Win_create_errhandler(MPI_Win_errhandler_function* function_,
        MPI_Errhandler* errhandler);
int PMPI_Win_create_keyval(MPI_Win_copy_attr_function* win_copy_attr_fn,
        MPI_Win_delete_attr_function* win_delete_attr_fn,
        int* win_keyval, void* extra_state);
int PMPI_Win_delete_attr(MPI_Win win, int win_keyval);
int PMPI_Win_detach(MPI_Win win, void* base);
MPI_Win PMPI_Win_f2c(MPI_Fint win);
int PMPI_Win_fence(int assert_, MPI_Win win);
int PMPI_Win_flush(int rank, MPI_Win win);
int PMPI_Win_flush_all(MPI_Win win);
int PMPI_Win_flush_local(int rank, MPI_Win win);
int PMPI_Win_flush_local_all(MPI_Win win);
int PMPI_Win_free(MPI_Win* win);
int PMPI_Win_free_keyval(int* win_keyval);
int PMPI_Win_get_attr(MPI_Win win, int win_keyval,
        void* attribute_val, int* flag);
int PMPI_Win_get_errhandler(MPI_Win win, MPI_Errhandler* errhandler);
int PMPI_Win_get_group(MPI_Win win, MPI_Group* group);
int PMPI_Win_get_info(MPI_Win win, MPI_Info* info_used);
int PMPI_Win_get_name(MPI_Win win, char* win_name, int* resultlen);
int PMPI_Win_lock(int lock_type, int rank, int assert_, MPI_Win win);
int PMPI_Win_lock_all(int assert_, MPI_Win win);
int PMPI_Win_post(MPI_Group group, int assert_, MPI_Win win);
int PMPI_Win_set_attr(MPI_Win win, int win_keyval, void* attribute_val);
int PMPI_Win_set_errhandler(MPI_Win win, MPI_Errhandler errhandler);
int PMPI_Win_set_info(MPI_Win win, MPI_Info info);
int PMPI_Win_set_name(MPI_Win win, char* win_name);
int PMPI_Win_shared_query(MPI_Win win, int rank, MPI_Aint* size, int* disp_unit, void* baseptr);
int PMPI_Win_start(MPI_Group group, int assert_, MPI_Win win);
int PMPI_Win_sync(MPI_Win win);
int PMPI_Win_test(MPI_Win win, int* flag);
int PMPI_Win_unlock(int rank, MPI_Win win);
int PMPI_Win_unlock_all(MPI_Win win);
int PMPI_Win_wait(MPI_Win win);
double PMPI_Wtick();
double PMPI_Wtime();
static if(OMPI_MAJOR_VERSION == 1 && OMPI_MINOR_VERSION >= 8)
{
    int PMPI_T_init_thread (int required, int* provided);
    int PMPI_T_finalize ();
    int PMPI_T_cvar_get_num (int* num_cvar);
    int PMPI_T_cvar_get_info (int cvar_index, char* name, int* name_len,
            int* verbosity, MPI_Datatype* datatype,
            MPI_T_enum* enumtype, char* desc,
            int* desc_len, int* bind, int* scope_);
    int PMPI_T_cvar_get_index (char* name, int* cvar_index);
    int PMPI_T_cvar_handle_alloc (int cvar_index, void* obj_handle,
            MPI_T_cvar_handle* handle, int* count);
    int PMPI_T_cvar_handle_free (MPI_T_cvar_handle* handle);
    int PMPI_T_cvar_read (MPI_T_cvar_handle handle, void* buf);
    int PMPI_T_cvar_write (MPI_T_cvar_handle handle, void* buf);
    int PMPI_T_category_get_num(int* num_cat);
    int PMPI_T_category_get_info(int cat_index, char* name, int* name_len,
            char* desc, int* desc_len, int* num_cvars,
            int* num_pvars, int* num_categories);
    int PMPI_T_category_get_index (char* name, int* category_index);
    int PMPI_T_category_get_cvars(int cat_index, int len, int* indices);
    int PMPI_T_category_get_pvars(int cat_index, int len, int* indices);
    int PMPI_T_category_get_categories(int cat_index, int len, int* indices);
    int PMPI_T_category_changed(int* stamp);
    
    int PMPI_T_pvar_get_num(int* num_pvar);
    int PMPI_T_pvar_get_info(int pvar_index, char* name, int* name_len,
            int* verbosity, int* var_class, MPI_Datatype* datatype,
            MPI_T_enum* enumtype, char* desc, int* desc_len, int* bind,
            int* readonly, int* continuous, int* atomic);
    int PMPI_T_pvar_get_index (char* name, int var_class, int* pvar_index);
    int PMPI_T_pvar_session_create(MPI_T_pvar_session* session);
    int PMPI_T_pvar_session_free(MPI_T_pvar_session* session);
    int PMPI_T_pvar_handle_alloc(MPI_T_pvar_session session, int pvar_index,
            void* obj_handle, MPI_T_pvar_handle* handle, int* count);
    int PMPI_T_pvar_handle_free(MPI_T_pvar_session session, MPI_T_pvar_handle* handle);
    int PMPI_T_pvar_start(MPI_T_pvar_session session, MPI_T_pvar_handle handle);
    int PMPI_T_pvar_stop(MPI_T_pvar_session session, MPI_T_pvar_handle handle);
    int PMPI_T_pvar_read(MPI_T_pvar_session session, MPI_T_pvar_handle handle,
            void* buf);
    int PMPI_T_pvar_write(MPI_T_pvar_session session, MPI_T_pvar_handle handle,
            void* buf);
    int PMPI_T_pvar_reset(MPI_T_pvar_session session, MPI_T_pvar_handle handle);
    int PMPI_T_pvar_readreset(MPI_T_pvar_session session, MPI_T_pvar_handle handle,
            void* buf);
    int PMPI_T_enum_get_info(MPI_T_enum enumtype, int* num, char* name, int* name_len);
    int PMPI_T_enum_get_item(MPI_T_enum enumtype, int index, int* value, char* name,
            int* name_len);
    
    /*
     *  Tool MPI API
     */
    int MPI_T_init_thread (int required, int* provided);
    int MPI_T_finalize ();
    int MPI_T_cvar_get_num (int* num_cvar);
    int MPI_T_cvar_get_info (int cvar_index, char* name, int* name_len,
            int* verbosity, MPI_Datatype* datatype,
            MPI_T_enum* enumtype, char* desc,
            int* desc_len, int* bind, int* scope_);
    int MPI_T_cvar_get_index (char* name, int* cvar_index);
    int MPI_T_cvar_handle_alloc (int cvar_index, void* obj_handle,
            MPI_T_cvar_handle* handle, int* count);
    int MPI_T_cvar_handle_free (MPI_T_cvar_handle* handle);
    int MPI_T_cvar_read (MPI_T_cvar_handle handle, void* buf);
    int MPI_T_cvar_write (MPI_T_cvar_handle handle, void* buf);
    int MPI_T_category_get_num(int* num_cat);
    int MPI_T_category_get_info(int cat_index, char* name, int* name_len,
            char* desc, int* desc_len, int* num_cvars,
            int* num_pvars, int* num_categories);
    int MPI_T_category_get_index (char* name, int* category_index);
    int MPI_T_category_get_cvars(int cat_index, int len, int* indices);
    int MPI_T_category_get_pvars(int cat_index, int len, int* indices);
    int MPI_T_category_get_categories(int cat_index, int len, int* indices);
    int MPI_T_category_changed(int* stamp);
    
    int MPI_T_pvar_get_num(int* num_pvar);
    int MPI_T_pvar_get_info(int pvar_index, char* name, int* name_len,
            int* verbosity, int* var_class, MPI_Datatype* datatype,
            MPI_T_enum* enumtype, char* desc, int* desc_len, int* bind,
            int* readonly, int* continuous, int* atomic);
    int MPI_T_pvar_get_index (char* name, int var_class, int* pvar_index);
    int MPI_T_pvar_session_create(MPI_T_pvar_session* session);
    int MPI_T_pvar_session_free(MPI_T_pvar_session* session);
    int MPI_T_pvar_handle_alloc(MPI_T_pvar_session session, int pvar_index,
            void* obj_handle, MPI_T_pvar_handle* handle, int* count);
    int MPI_T_pvar_handle_free(MPI_T_pvar_session session, MPI_T_pvar_handle* handle);
    int MPI_T_pvar_start(MPI_T_pvar_session session, MPI_T_pvar_handle handle);
    int MPI_T_pvar_stop(MPI_T_pvar_session session, MPI_T_pvar_handle handle);
    int MPI_T_pvar_read(MPI_T_pvar_session session, MPI_T_pvar_handle handle,
            void* buf);
    int MPI_T_pvar_write(MPI_T_pvar_session session, MPI_T_pvar_handle handle,
            void* buf);
    int MPI_T_pvar_reset(MPI_T_pvar_session session, MPI_T_pvar_handle handle);
    int MPI_T_pvar_readreset(MPI_T_pvar_session session, MPI_T_pvar_handle handle,
            void* buf);
    int MPI_T_enum_get_info(MPI_T_enum enumtype, int* num, char* name, int* name_len);
    int MPI_T_enum_get_item(MPI_T_enum enumtype, int index, int* value, char* name,
            int* name_len);
}

/* Non-standard but public extensions to MPI */
/* Fault Tolerance Extensions */
int PMPIX_Comm_failure_ack(MPI_Comm comm);
int PMPIX_Comm_failure_get_acked(MPI_Comm comm, MPI_Group* failedgrp);
int PMPIX_Comm_revoke(MPI_Comm comm);
int PMPIX_Comm_shrink(MPI_Comm comm, MPI_Comm* newcomm);
int PMPIX_Comm_agree(MPI_Comm comm, int *flag);


/* End of MPI bindings */

/* feature advertisement */
enum MPIIMPL_ADVERTISES_FEATURES = 1;
enum MPIIMPL_HAVE_MPI_INFO = 1;                                                 
enum MPIIMPL_HAVE_MPI_COMBINER_DARRAY = 1;                                      
enum MPIIMPL_HAVE_MPI_TYPE_CREATE_DARRAY = 1;
enum MPIIMPL_HAVE_MPI_COMBINER_SUBARRAY = 1;
enum MPIIMPL_HAVE_MPI_TYPE_CREATE_DARRAY = 1;
enum MPIIMPL_HAVE_MPI_COMBINER_DUP = 1;
enum MPIIMPL_HAVE_MPI_GREQUEST = 1;
enum MPIIMPL_HAVE_STATUS_SET_BYTES = 1;
enum MPIIMPL_HAVE_STATUS_SET_INFO = 1;

/* Generalized requests extensions */
alias MPIX_Grequest_class = int;
int MPIX_Grequest_class_create(MPI_Grequest_query_function* query_fn,
                               MPI_Grequest_free_function* free_fn,
                               MPI_Grequest_cancel_function* cancel_fn,
                               MPIX_Grequest_poll_function* poll_fn,
                               MPIX_Grequest_wait_function* wait_fn,
                               MPIX_Grequest_class* greq_class);
int MPIX_Grequest_class_allocate(MPIX_Grequest_class greq_class, void* extra_state,
                                 MPI_Request* request);
int MPIX_Grequest_start(MPI_Grequest_query_function* query_fn,
                        MPI_Grequest_free_function* free_fn,
                        MPI_Grequest_cancel_function* cancel_fn,
                        MPIX_Grequest_poll_function* poll_fn,
                        MPIX_Grequest_wait_function* wait_fn, void* extra_state,
                        MPI_Request* request);

/* RMA Mutexes Extensions */
struct mpixi_mutex_s;
alias MPIX_Mutex = mpixi_mutex_s*;
int MPIX_Mutex_create(int count, MPI_Comm comm, MPIX_Mutex* hdl);
int MPIX_Mutex_free(MPIX_Mutex* hdl);
int MPIX_Mutex_lock(MPIX_Mutex hdl, int mutex, int proc);
int MPIX_Mutex_unlock(MPIX_Mutex hdl, int mutex, int proc);

/* Generalized requests extensions */
int PMPIX_Grequest_class_create(MPI_Grequest_query_function* query_fn,
                                MPI_Grequest_free_function* free_fn,
                                MPI_Grequest_cancel_function* cancel_fn,
                                MPIX_Grequest_poll_function* poll_fn,
                                MPIX_Grequest_wait_function* wait_fn,
                                MPIX_Grequest_class* greq_class);
int PMPIX_Grequest_class_allocate(MPIX_Grequest_class greq_class, void* extra_state,
                                  MPI_Request* request);
int PMPIX_Grequest_start(MPI_Grequest_query_function* query_fn,
                         MPI_Grequest_free_function* free_fn,
                         MPI_Grequest_cancel_function* cancel_fn,
                         MPIX_Grequest_poll_function* poll_fn,
                         MPIX_Grequest_wait_function* wait_fn, void* extra_state,
                         MPI_Request* request);

/* RMA Mutexes Extensions */
int PMPIX_Mutex_create(int count, MPI_Comm comm, MPIX_Mutex* hdl);
int PMPIX_Mutex_free(MPIX_Mutex* hdl);
int PMPIX_Mutex_lock(MPIX_Mutex hdl, int mutex, int proc);
int PMPIX_Mutex_unlock(MPIX_Mutex hdl, int mutex, int proc);

